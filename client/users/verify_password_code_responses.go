// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// VerifyPasswordCodeReader is a Reader for the VerifyPasswordCode structure.
type VerifyPasswordCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyPasswordCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyPasswordCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVerifyPasswordCodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewVerifyPasswordCodeGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewVerifyPasswordCodeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVerifyPasswordCodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVerifyPasswordCodeOK creates a VerifyPasswordCodeOK with default headers values
func NewVerifyPasswordCodeOK() *VerifyPasswordCodeOK {
	return &VerifyPasswordCodeOK{}
}

/*
VerifyPasswordCodeOK describes a response with status code 200, with default header values.

The request has succeeded
*/
type VerifyPasswordCodeOK struct {
}

// IsSuccess returns true when this verify password code o k response has a 2xx status code
func (o *VerifyPasswordCodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify password code o k response has a 3xx status code
func (o *VerifyPasswordCodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password code o k response has a 4xx status code
func (o *VerifyPasswordCodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify password code o k response has a 5xx status code
func (o *VerifyPasswordCodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password code o k response a status code equal to that given
func (o *VerifyPasswordCodeOK) IsCode(code int) bool {
	return code == 200
}

func (o *VerifyPasswordCodeOK) Error() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeOK ", 200)
}

func (o *VerifyPasswordCodeOK) String() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeOK ", 200)
}

func (o *VerifyPasswordCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyPasswordCodeBadRequest creates a VerifyPasswordCodeBadRequest with default headers values
func NewVerifyPasswordCodeBadRequest() *VerifyPasswordCodeBadRequest {
	return &VerifyPasswordCodeBadRequest{}
}

/*
VerifyPasswordCodeBadRequest describes a response with status code 400, with default header values.

The request sent was not valid
*/
type VerifyPasswordCodeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify password code bad request response has a 2xx status code
func (o *VerifyPasswordCodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password code bad request response has a 3xx status code
func (o *VerifyPasswordCodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password code bad request response has a 4xx status code
func (o *VerifyPasswordCodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify password code bad request response has a 5xx status code
func (o *VerifyPasswordCodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password code bad request response a status code equal to that given
func (o *VerifyPasswordCodeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *VerifyPasswordCodeBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeBadRequest  %+v", 400, o.Payload)
}

func (o *VerifyPasswordCodeBadRequest) String() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeBadRequest  %+v", 400, o.Payload)
}

func (o *VerifyPasswordCodeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordCodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyPasswordCodeGone creates a VerifyPasswordCodeGone with default headers values
func NewVerifyPasswordCodeGone() *VerifyPasswordCodeGone {
	return &VerifyPasswordCodeGone{}
}

/*
VerifyPasswordCodeGone describes a response with status code 410, with default header values.

The code provided has expired
*/
type VerifyPasswordCodeGone struct {
}

// IsSuccess returns true when this verify password code gone response has a 2xx status code
func (o *VerifyPasswordCodeGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password code gone response has a 3xx status code
func (o *VerifyPasswordCodeGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password code gone response has a 4xx status code
func (o *VerifyPasswordCodeGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify password code gone response has a 5xx status code
func (o *VerifyPasswordCodeGone) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password code gone response a status code equal to that given
func (o *VerifyPasswordCodeGone) IsCode(code int) bool {
	return code == 410
}

func (o *VerifyPasswordCodeGone) Error() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeGone ", 410)
}

func (o *VerifyPasswordCodeGone) String() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeGone ", 410)
}

func (o *VerifyPasswordCodeGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyPasswordCodeTooManyRequests creates a VerifyPasswordCodeTooManyRequests with default headers values
func NewVerifyPasswordCodeTooManyRequests() *VerifyPasswordCodeTooManyRequests {
	return &VerifyPasswordCodeTooManyRequests{}
}

/*
VerifyPasswordCodeTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type VerifyPasswordCodeTooManyRequests struct {
}

// IsSuccess returns true when this verify password code too many requests response has a 2xx status code
func (o *VerifyPasswordCodeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password code too many requests response has a 3xx status code
func (o *VerifyPasswordCodeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password code too many requests response has a 4xx status code
func (o *VerifyPasswordCodeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify password code too many requests response has a 5xx status code
func (o *VerifyPasswordCodeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password code too many requests response a status code equal to that given
func (o *VerifyPasswordCodeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *VerifyPasswordCodeTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeTooManyRequests ", 429)
}

func (o *VerifyPasswordCodeTooManyRequests) String() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeTooManyRequests ", 429)
}

func (o *VerifyPasswordCodeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyPasswordCodeInternalServerError creates a VerifyPasswordCodeInternalServerError with default headers values
func NewVerifyPasswordCodeInternalServerError() *VerifyPasswordCodeInternalServerError {
	return &VerifyPasswordCodeInternalServerError{}
}

/*
VerifyPasswordCodeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type VerifyPasswordCodeInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify password code internal server error response has a 2xx status code
func (o *VerifyPasswordCodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password code internal server error response has a 3xx status code
func (o *VerifyPasswordCodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password code internal server error response has a 4xx status code
func (o *VerifyPasswordCodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify password code internal server error response has a 5xx status code
func (o *VerifyPasswordCodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this verify password code internal server error response a status code equal to that given
func (o *VerifyPasswordCodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *VerifyPasswordCodeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeInternalServerError  %+v", 500, o.Payload)
}

func (o *VerifyPasswordCodeInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/verify-password-reset-code][%d] verifyPasswordCodeInternalServerError  %+v", 500, o.Payload)
}

func (o *VerifyPasswordCodeInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordCodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
