// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RepositoryKind RepositoryKind
//
// Repository kind:
//   - `0` - Helm charts
//   - `1` - Falco rules
//   - `2` - OPA policies
//   - `3` - OLM operators
//   - `4` - Tinkerbell actions
//   - `5` - Krew kubectl plugins
//   - `6` - Helm plugins
//   - `7` - Tekton tasks
//   - `8` - KEDA scalers
//   - `9` - Core DNS plugins
//   - `10` - Keptn integrations
//   - `11` - Tekton pipelines
//   - `12` - Container images
//   - `13` - Kubewarden policies
//   - `14` - Gatekeeper policies
//   - `15` - Kyverno policies
//   - `16` - Knative client plugins
//   - `17` - Backstage plugins
//
// swagger:model RepositoryKind
type RepositoryKind int32

// for schema
var repositoryKindEnum []interface{}

func init() {
	var res []RepositoryKind
	if err := json.Unmarshal([]byte(`["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryKindEnum = append(repositoryKindEnum, v)
	}
}

func (m RepositoryKind) validateRepositoryKindEnum(path, location string, value RepositoryKind) error {
	if err := validate.EnumCase(path, location, value, repositoryKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this repository kind
func (m RepositoryKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRepositoryKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this repository kind based on context it is used
func (m RepositoryKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
