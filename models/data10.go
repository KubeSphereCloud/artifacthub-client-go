// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Data10 Data10
//
// swagger:model Data10
type Data10 struct {

	// examples
	Examples interface{} `json:"examples,omitempty"`

	// manifest raw
	ManifestRaw map[string]string `json:"manifestRaw,omitempty"`

	// pipelines min version
	// Example: 2.0.0
	PipelinesMinVersion string `json:"pipelines.minVersion,omitempty"`

	// platforms
	Platforms []string `json:"platforms"`

	// tasks
	Tasks *Tasks `json:"tasks,omitempty"`
}

// Validate validates this data10
func (m *Data10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Data10) validateTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	if m.Tasks != nil {
		if err := m.Tasks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tasks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tasks")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data10 based on the context it is used
func (m *Data10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Data10) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	if m.Tasks != nil {
		if err := m.Tasks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tasks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tasks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Data10) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Data10) UnmarshalBinary(b []byte) error {
	var res Data10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
