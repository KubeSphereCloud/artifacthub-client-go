// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetUserOptOutEntriesReader is a Reader for the GetUserOptOutEntries structure.
type GetUserOptOutEntriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserOptOutEntriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserOptOutEntriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserOptOutEntriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUserOptOutEntriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserOptOutEntriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserOptOutEntriesOK creates a GetUserOptOutEntriesOK with default headers values
func NewGetUserOptOutEntriesOK() *GetUserOptOutEntriesOK {
	return &GetUserOptOutEntriesOK{}
}

/*
GetUserOptOutEntriesOK describes a response with status code 200, with default header values.

GetUserOptOutEntriesOK get user opt out entries o k
*/
type GetUserOptOutEntriesOK struct {

	/* Total number of user's opt-out entries
	 */
	PaginationTotalCount string

	Payload []*models.SubscriptionsOptOutResponse
}

// IsSuccess returns true when this get user opt out entries o k response has a 2xx status code
func (o *GetUserOptOutEntriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user opt out entries o k response has a 3xx status code
func (o *GetUserOptOutEntriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user opt out entries o k response has a 4xx status code
func (o *GetUserOptOutEntriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user opt out entries o k response has a 5xx status code
func (o *GetUserOptOutEntriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user opt out entries o k response a status code equal to that given
func (o *GetUserOptOutEntriesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetUserOptOutEntriesOK) Error() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesOK  %+v", 200, o.Payload)
}

func (o *GetUserOptOutEntriesOK) String() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesOK  %+v", 200, o.Payload)
}

func (o *GetUserOptOutEntriesOK) GetPayload() []*models.SubscriptionsOptOutResponse {
	return o.Payload
}

func (o *GetUserOptOutEntriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Pagination-Total-Count
	hdrPaginationTotalCount := response.GetHeader("Pagination-Total-Count")

	if hdrPaginationTotalCount != "" {
		o.PaginationTotalCount = hdrPaginationTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOptOutEntriesUnauthorized creates a GetUserOptOutEntriesUnauthorized with default headers values
func NewGetUserOptOutEntriesUnauthorized() *GetUserOptOutEntriesUnauthorized {
	return &GetUserOptOutEntriesUnauthorized{}
}

/*
GetUserOptOutEntriesUnauthorized describes a response with status code 401, with default header values.

Valid authentication credentials not provided
*/
type GetUserOptOutEntriesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user opt out entries unauthorized response has a 2xx status code
func (o *GetUserOptOutEntriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user opt out entries unauthorized response has a 3xx status code
func (o *GetUserOptOutEntriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user opt out entries unauthorized response has a 4xx status code
func (o *GetUserOptOutEntriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user opt out entries unauthorized response has a 5xx status code
func (o *GetUserOptOutEntriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user opt out entries unauthorized response a status code equal to that given
func (o *GetUserOptOutEntriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetUserOptOutEntriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserOptOutEntriesUnauthorized) String() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserOptOutEntriesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserOptOutEntriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserOptOutEntriesTooManyRequests creates a GetUserOptOutEntriesTooManyRequests with default headers values
func NewGetUserOptOutEntriesTooManyRequests() *GetUserOptOutEntriesTooManyRequests {
	return &GetUserOptOutEntriesTooManyRequests{}
}

/*
GetUserOptOutEntriesTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetUserOptOutEntriesTooManyRequests struct {
}

// IsSuccess returns true when this get user opt out entries too many requests response has a 2xx status code
func (o *GetUserOptOutEntriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user opt out entries too many requests response has a 3xx status code
func (o *GetUserOptOutEntriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user opt out entries too many requests response has a 4xx status code
func (o *GetUserOptOutEntriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user opt out entries too many requests response has a 5xx status code
func (o *GetUserOptOutEntriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get user opt out entries too many requests response a status code equal to that given
func (o *GetUserOptOutEntriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetUserOptOutEntriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesTooManyRequests ", 429)
}

func (o *GetUserOptOutEntriesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesTooManyRequests ", 429)
}

func (o *GetUserOptOutEntriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserOptOutEntriesInternalServerError creates a GetUserOptOutEntriesInternalServerError with default headers values
func NewGetUserOptOutEntriesInternalServerError() *GetUserOptOutEntriesInternalServerError {
	return &GetUserOptOutEntriesInternalServerError{}
}

/*
GetUserOptOutEntriesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetUserOptOutEntriesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user opt out entries internal server error response has a 2xx status code
func (o *GetUserOptOutEntriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user opt out entries internal server error response has a 3xx status code
func (o *GetUserOptOutEntriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user opt out entries internal server error response has a 4xx status code
func (o *GetUserOptOutEntriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user opt out entries internal server error response has a 5xx status code
func (o *GetUserOptOutEntriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get user opt out entries internal server error response a status code equal to that given
func (o *GetUserOptOutEntriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetUserOptOutEntriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserOptOutEntriesInternalServerError) String() string {
	return fmt.Sprintf("[GET /subscriptions/opt-out][%d] getUserOptOutEntriesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserOptOutEntriesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserOptOutEntriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
