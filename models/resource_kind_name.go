// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceKindName ResourceKindName
//
// Resource kind name:
//   - `repositoryName` - Repository name
//   - `repositoryURL` - Repository URL
//   - `organizationName` - Organization name
//   - `userAlias` - User alias
//
// swagger:model ResourceKindName
type ResourceKindName string

func NewResourceKindName(value ResourceKindName) *ResourceKindName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourceKindName.
func (m ResourceKindName) Pointer() *ResourceKindName {
	return &m
}

const (

	// ResourceKindNameRepositoryName captures enum value "repositoryName"
	ResourceKindNameRepositoryName ResourceKindName = "repositoryName"

	// ResourceKindNameRepositoryURL captures enum value "repositoryURL"
	ResourceKindNameRepositoryURL ResourceKindName = "repositoryURL"

	// ResourceKindNameOrganizationName captures enum value "organizationName"
	ResourceKindNameOrganizationName ResourceKindName = "organizationName"

	// ResourceKindNameUserAlias captures enum value "userAlias"
	ResourceKindNameUserAlias ResourceKindName = "userAlias"
)

// for schema
var resourceKindNameEnum []interface{}

func init() {
	var res []ResourceKindName
	if err := json.Unmarshal([]byte(`["repositoryName","repositoryURL","organizationName","userAlias"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceKindNameEnum = append(resourceKindNameEnum, v)
	}
}

func (m ResourceKindName) validateResourceKindNameEnum(path, location string, value ResourceKindName) error {
	if err := validate.EnumCase(path, location, value, resourceKindNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource kind name
func (m ResourceKindName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceKindNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource kind name based on context it is used
func (m ResourceKindName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
