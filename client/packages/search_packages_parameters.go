// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchPackagesParams creates a new SearchPackagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchPackagesParams() *SearchPackagesParams {
	return &SearchPackagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchPackagesParamsWithTimeout creates a new SearchPackagesParams object
// with the ability to set a timeout on a request.
func NewSearchPackagesParamsWithTimeout(timeout time.Duration) *SearchPackagesParams {
	return &SearchPackagesParams{
		timeout: timeout,
	}
}

// NewSearchPackagesParamsWithContext creates a new SearchPackagesParams object
// with the ability to set a context for a request.
func NewSearchPackagesParamsWithContext(ctx context.Context) *SearchPackagesParams {
	return &SearchPackagesParams{
		Context: ctx,
	}
}

// NewSearchPackagesParamsWithHTTPClient creates a new SearchPackagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchPackagesParamsWithHTTPClient(client *http.Client) *SearchPackagesParams {
	return &SearchPackagesParams{
		HTTPClient: client,
	}
}

/*
SearchPackagesParams contains all the parameters to send to the API endpoint

	for the search packages operation.

	Typically these are written to a http.Request.
*/
type SearchPackagesParams struct {

	/* Capabilities.

	   List of operator capability levels
	*/
	Capabilities []string

	/* Category.

	   Package category:
	* `1` - AI / Machine learning
	* `2` - Database
	* `3` - Integration and delivery
	* `4` - Monitoring and logging
	* `5` - Networking
	* `6` - Security
	* `7` - Storage
	* `8` - Streaming and messaging
	*/
	Category []float64

	/* Cncf.

	   Whether to get only pacakges published by CNCF projects
	*/
	Cncf *bool

	/* Deprecated.

	   Whether to include deprecated packages or not
	*/
	Deprecated *bool

	/* Facets.

	   Whether we should get facets or not
	*/
	Facets bool

	/* Kind.

	   Repository kind:
	* `0` - Helm charts
	* `1` - Falco rules
	* `2` - OPA policies
	* `3` - OLM operators
	* `4` - Tinkerbell actions
	* `5` - Krew kubectl plugins
	* `6` - Helm plugins
	* `7` - Tekton tasks
	* `8` - KEDA scalers
	* `9` - Core DNS plugins
	* `10` - Keptn integrations
	* `11` - Tekton pipelines
	* `12` - Container images
	* `13` - Kubewarden policies
	* `14` - Gatekeeper policies
	* `15` - Kyverno policies
	* `16` - Knative client plugins
	* `17` - Backstage plugins
	*/
	Kind []float64

	/* License.

	   List of SPDX identifiers
	*/
	License []string

	/* Limit.

	   The number of items to return

	   Format: int32
	   Default: 20
	*/
	Limit *int32

	/* Official.

	   Whether to get only official repositories
	*/
	Official *bool

	/* Offset.

	   The number of items to skip before starting to collect the result set

	   Format: int32
	*/
	Offset *int32

	/* Operators.

	   Whether to get only operators
	*/
	Operators *bool

	/* Org.

	   List of organization names
	*/
	Org []string

	/* Repo.

	   List of repository names
	*/
	Repo []string

	/* Sort.

	   Sort criteria
	*/
	Sort *string

	/* TsQueryWeb.

	   Text search query (websearch format)
	*/
	TsQueryWeb *string

	/* User.

	   List of aliases
	*/
	User []string

	/* VerifiedPublisher.

	   Whether to get only verified publisher
	*/
	VerifiedPublisher *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPackagesParams) WithDefaults() *SearchPackagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPackagesParams) SetDefaults() {
	var (
		deprecatedDefault = bool(false)

		limitDefault = int32(20)

		offsetDefault = int32(0)
	)

	val := SearchPackagesParams{
		Deprecated: &deprecatedDefault,
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search packages params
func (o *SearchPackagesParams) WithTimeout(timeout time.Duration) *SearchPackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search packages params
func (o *SearchPackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search packages params
func (o *SearchPackagesParams) WithContext(ctx context.Context) *SearchPackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search packages params
func (o *SearchPackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search packages params
func (o *SearchPackagesParams) WithHTTPClient(client *http.Client) *SearchPackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search packages params
func (o *SearchPackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapabilities adds the capabilities to the search packages params
func (o *SearchPackagesParams) WithCapabilities(capabilities []string) *SearchPackagesParams {
	o.SetCapabilities(capabilities)
	return o
}

// SetCapabilities adds the capabilities to the search packages params
func (o *SearchPackagesParams) SetCapabilities(capabilities []string) {
	o.Capabilities = capabilities
}

// WithCategory adds the category to the search packages params
func (o *SearchPackagesParams) WithCategory(category []float64) *SearchPackagesParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the search packages params
func (o *SearchPackagesParams) SetCategory(category []float64) {
	o.Category = category
}

// WithCncf adds the cncf to the search packages params
func (o *SearchPackagesParams) WithCncf(cncf *bool) *SearchPackagesParams {
	o.SetCncf(cncf)
	return o
}

// SetCncf adds the cncf to the search packages params
func (o *SearchPackagesParams) SetCncf(cncf *bool) {
	o.Cncf = cncf
}

// WithDeprecated adds the deprecated to the search packages params
func (o *SearchPackagesParams) WithDeprecated(deprecated *bool) *SearchPackagesParams {
	o.SetDeprecated(deprecated)
	return o
}

// SetDeprecated adds the deprecated to the search packages params
func (o *SearchPackagesParams) SetDeprecated(deprecated *bool) {
	o.Deprecated = deprecated
}

// WithFacets adds the facets to the search packages params
func (o *SearchPackagesParams) WithFacets(facets bool) *SearchPackagesParams {
	o.SetFacets(facets)
	return o
}

// SetFacets adds the facets to the search packages params
func (o *SearchPackagesParams) SetFacets(facets bool) {
	o.Facets = facets
}

// WithKind adds the kind to the search packages params
func (o *SearchPackagesParams) WithKind(kind []float64) *SearchPackagesParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the search packages params
func (o *SearchPackagesParams) SetKind(kind []float64) {
	o.Kind = kind
}

// WithLicense adds the license to the search packages params
func (o *SearchPackagesParams) WithLicense(license []string) *SearchPackagesParams {
	o.SetLicense(license)
	return o
}

// SetLicense adds the license to the search packages params
func (o *SearchPackagesParams) SetLicense(license []string) {
	o.License = license
}

// WithLimit adds the limit to the search packages params
func (o *SearchPackagesParams) WithLimit(limit *int32) *SearchPackagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search packages params
func (o *SearchPackagesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOfficial adds the official to the search packages params
func (o *SearchPackagesParams) WithOfficial(official *bool) *SearchPackagesParams {
	o.SetOfficial(official)
	return o
}

// SetOfficial adds the official to the search packages params
func (o *SearchPackagesParams) SetOfficial(official *bool) {
	o.Official = official
}

// WithOffset adds the offset to the search packages params
func (o *SearchPackagesParams) WithOffset(offset *int32) *SearchPackagesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search packages params
func (o *SearchPackagesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOperators adds the operators to the search packages params
func (o *SearchPackagesParams) WithOperators(operators *bool) *SearchPackagesParams {
	o.SetOperators(operators)
	return o
}

// SetOperators adds the operators to the search packages params
func (o *SearchPackagesParams) SetOperators(operators *bool) {
	o.Operators = operators
}

// WithOrg adds the org to the search packages params
func (o *SearchPackagesParams) WithOrg(org []string) *SearchPackagesParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the search packages params
func (o *SearchPackagesParams) SetOrg(org []string) {
	o.Org = org
}

// WithRepo adds the repo to the search packages params
func (o *SearchPackagesParams) WithRepo(repo []string) *SearchPackagesParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the search packages params
func (o *SearchPackagesParams) SetRepo(repo []string) {
	o.Repo = repo
}

// WithSort adds the sort to the search packages params
func (o *SearchPackagesParams) WithSort(sort *string) *SearchPackagesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search packages params
func (o *SearchPackagesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTsQueryWeb adds the tsQueryWeb to the search packages params
func (o *SearchPackagesParams) WithTsQueryWeb(tsQueryWeb *string) *SearchPackagesParams {
	o.SetTsQueryWeb(tsQueryWeb)
	return o
}

// SetTsQueryWeb adds the tsQueryWeb to the search packages params
func (o *SearchPackagesParams) SetTsQueryWeb(tsQueryWeb *string) {
	o.TsQueryWeb = tsQueryWeb
}

// WithUser adds the user to the search packages params
func (o *SearchPackagesParams) WithUser(user []string) *SearchPackagesParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the search packages params
func (o *SearchPackagesParams) SetUser(user []string) {
	o.User = user
}

// WithVerifiedPublisher adds the verifiedPublisher to the search packages params
func (o *SearchPackagesParams) WithVerifiedPublisher(verifiedPublisher *bool) *SearchPackagesParams {
	o.SetVerifiedPublisher(verifiedPublisher)
	return o
}

// SetVerifiedPublisher adds the verifiedPublisher to the search packages params
func (o *SearchPackagesParams) SetVerifiedPublisher(verifiedPublisher *bool) {
	o.VerifiedPublisher = verifiedPublisher
}

// WriteToRequest writes these params to a swagger request
func (o *SearchPackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Capabilities != nil {

		// binding items for capabilities
		joinedCapabilities := o.bindParamCapabilities(reg)

		// query array param capabilities
		if err := r.SetQueryParam("capabilities", joinedCapabilities...); err != nil {
			return err
		}
	}

	if o.Category != nil {

		// binding items for category
		joinedCategory := o.bindParamCategory(reg)

		// query array param category
		if err := r.SetQueryParam("category", joinedCategory...); err != nil {
			return err
		}
	}

	if o.Cncf != nil {

		// query param cncf
		var qrCncf bool

		if o.Cncf != nil {
			qrCncf = *o.Cncf
		}
		qCncf := swag.FormatBool(qrCncf)
		if qCncf != "" {

			if err := r.SetQueryParam("cncf", qCncf); err != nil {
				return err
			}
		}
	}

	if o.Deprecated != nil {

		// query param deprecated
		var qrDeprecated bool

		if o.Deprecated != nil {
			qrDeprecated = *o.Deprecated
		}
		qDeprecated := swag.FormatBool(qrDeprecated)
		if qDeprecated != "" {

			if err := r.SetQueryParam("deprecated", qDeprecated); err != nil {
				return err
			}
		}
	}

	// query param facets
	qrFacets := o.Facets
	qFacets := swag.FormatBool(qrFacets)
	if qFacets != "" {

		if err := r.SetQueryParam("facets", qFacets); err != nil {
			return err
		}
	}

	if o.Kind != nil {

		// binding items for kind
		joinedKind := o.bindParamKind(reg)

		// query array param kind
		if err := r.SetQueryParam("kind", joinedKind...); err != nil {
			return err
		}
	}

	if o.License != nil {

		// binding items for license
		joinedLicense := o.bindParamLicense(reg)

		// query array param license
		if err := r.SetQueryParam("license", joinedLicense...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Official != nil {

		// query param official
		var qrOfficial bool

		if o.Official != nil {
			qrOfficial = *o.Official
		}
		qOfficial := swag.FormatBool(qrOfficial)
		if qOfficial != "" {

			if err := r.SetQueryParam("official", qOfficial); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Operators != nil {

		// query param operators
		var qrOperators bool

		if o.Operators != nil {
			qrOperators = *o.Operators
		}
		qOperators := swag.FormatBool(qrOperators)
		if qOperators != "" {

			if err := r.SetQueryParam("operators", qOperators); err != nil {
				return err
			}
		}
	}

	if o.Org != nil {

		// binding items for org
		joinedOrg := o.bindParamOrg(reg)

		// query array param org
		if err := r.SetQueryParam("org", joinedOrg...); err != nil {
			return err
		}
	}

	if o.Repo != nil {

		// binding items for repo
		joinedRepo := o.bindParamRepo(reg)

		// query array param repo
		if err := r.SetQueryParam("repo", joinedRepo...); err != nil {
			return err
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.TsQueryWeb != nil {

		// query param ts_query_web
		var qrTsQueryWeb string

		if o.TsQueryWeb != nil {
			qrTsQueryWeb = *o.TsQueryWeb
		}
		qTsQueryWeb := qrTsQueryWeb
		if qTsQueryWeb != "" {

			if err := r.SetQueryParam("ts_query_web", qTsQueryWeb); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// binding items for user
		joinedUser := o.bindParamUser(reg)

		// query array param user
		if err := r.SetQueryParam("user", joinedUser...); err != nil {
			return err
		}
	}

	if o.VerifiedPublisher != nil {

		// query param verified_publisher
		var qrVerifiedPublisher bool

		if o.VerifiedPublisher != nil {
			qrVerifiedPublisher = *o.VerifiedPublisher
		}
		qVerifiedPublisher := swag.FormatBool(qrVerifiedPublisher)
		if qVerifiedPublisher != "" {

			if err := r.SetQueryParam("verified_publisher", qVerifiedPublisher); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchPackages binds the parameter capabilities
func (o *SearchPackagesParams) bindParamCapabilities(formats strfmt.Registry) []string {
	capabilitiesIR := o.Capabilities

	var capabilitiesIC []string
	for _, capabilitiesIIR := range capabilitiesIR { // explode []string

		capabilitiesIIV := capabilitiesIIR // string as string
		capabilitiesIC = append(capabilitiesIC, capabilitiesIIV)
	}

	// items.CollectionFormat: ""
	capabilitiesIS := swag.JoinByFormat(capabilitiesIC, "")

	return capabilitiesIS
}

// bindParamSearchPackages binds the parameter category
func (o *SearchPackagesParams) bindParamCategory(formats strfmt.Registry) []string {
	categoryIR := o.Category

	var categoryIC []string
	for _, categoryIIR := range categoryIR { // explode []float64

		categoryIIV := swag.FormatFloat64(categoryIIR) // float64 as string
		categoryIC = append(categoryIC, categoryIIV)
	}

	// items.CollectionFormat: ""
	categoryIS := swag.JoinByFormat(categoryIC, "")

	return categoryIS
}

// bindParamSearchPackages binds the parameter kind
func (o *SearchPackagesParams) bindParamKind(formats strfmt.Registry) []string {
	kindIR := o.Kind

	var kindIC []string
	for _, kindIIR := range kindIR { // explode []float64

		kindIIV := swag.FormatFloat64(kindIIR) // float64 as string
		kindIC = append(kindIC, kindIIV)
	}

	// items.CollectionFormat: ""
	kindIS := swag.JoinByFormat(kindIC, "")

	return kindIS
}

// bindParamSearchPackages binds the parameter license
func (o *SearchPackagesParams) bindParamLicense(formats strfmt.Registry) []string {
	licenseIR := o.License

	var licenseIC []string
	for _, licenseIIR := range licenseIR { // explode []string

		licenseIIV := licenseIIR // string as string
		licenseIC = append(licenseIC, licenseIIV)
	}

	// items.CollectionFormat: ""
	licenseIS := swag.JoinByFormat(licenseIC, "")

	return licenseIS
}

// bindParamSearchPackages binds the parameter org
func (o *SearchPackagesParams) bindParamOrg(formats strfmt.Registry) []string {
	orgIR := o.Org

	var orgIC []string
	for _, orgIIR := range orgIR { // explode []string

		orgIIV := orgIIR // string as string
		orgIC = append(orgIC, orgIIV)
	}

	// items.CollectionFormat: ""
	orgIS := swag.JoinByFormat(orgIC, "")

	return orgIS
}

// bindParamSearchPackages binds the parameter repo
func (o *SearchPackagesParams) bindParamRepo(formats strfmt.Registry) []string {
	repoIR := o.Repo

	var repoIC []string
	for _, repoIIR := range repoIR { // explode []string

		repoIIV := repoIIR // string as string
		repoIC = append(repoIC, repoIIV)
	}

	// items.CollectionFormat: ""
	repoIS := swag.JoinByFormat(repoIC, "")

	return repoIS
}

// bindParamSearchPackages binds the parameter user
func (o *SearchPackagesParams) bindParamUser(formats strfmt.Registry) []string {
	userIR := o.User

	var userIC []string
	for _, userIIR := range userIR { // explode []string

		userIIV := userIIR // string as string
		userIC = append(userIC, userIIV)
	}

	// items.CollectionFormat: ""
	userIS := swag.JoinByFormat(userIC, "")

	return userIS
}
