// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageBase PackageBase
//
// swagger:model PackageBase
type PackageBase struct {

	// all containers images whitelisted
	// Example: false
	AllContainersImagesWhitelisted bool `json:"all_containers_images_whitelisted,omitempty"`

	// app version
	// Example: 0.1.0
	AppVersion string `json:"app_version,omitempty"`

	// cncf
	Cncf bool `json:"cncf,omitempty"`

	// deprecated
	// Example: false
	Deprecated bool `json:"deprecated,omitempty"`

	// description
	// Example: This is a package sample
	Description string `json:"description,omitempty"`

	// display name
	// Example: Package 1
	DisplayName string `json:"display_name,omitempty"`

	// license
	// Example: MIT
	License string `json:"license,omitempty"`

	// logo image id
	// Example: 12345abcde
	LogoImageID string `json:"logo_image_id,omitempty"`

	// name
	// Example: pkg1
	// Required: true
	Name *string `json:"name"`

	// normalized name
	// Example: pkg1
	// Required: true
	NormalizedName *string `json:"normalized_name"`

	// official
	Official bool `json:"official,omitempty"`

	// package id
	// Required: true
	// Format: uuid
	PackageID *strfmt.UUID `json:"package_id"`

	// production organizations count
	ProductionOrganizationsCount float64 `json:"production_organizations_count,omitempty"`

	// repository
	// Required: true
	Repository *RepositorySummary `json:"repository"`

	// security report summary
	SecurityReportSummary *SecurityReportSummary `json:"security_report_summary,omitempty"`

	// signatures
	Signatures []Signature `json:"signatures"`

	// signed
	// Example: false
	Signed bool `json:"signed,omitempty"`

	// ts
	// Required: true
	Ts *int32 `json:"ts"`

	// version
	// Example: 1.0.0
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this package base
func (m *PackageBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNormalizedName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityReportSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageBase) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PackageBase) validateNormalizedName(formats strfmt.Registry) error {

	if err := validate.Required("normalized_name", "body", m.NormalizedName); err != nil {
		return err
	}

	return nil
}

func (m *PackageBase) validatePackageID(formats strfmt.Registry) error {

	if err := validate.Required("package_id", "body", m.PackageID); err != nil {
		return err
	}

	if err := validate.FormatOf("package_id", "body", "uuid", m.PackageID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageBase) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *PackageBase) validateSecurityReportSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityReportSummary) { // not required
		return nil
	}

	if m.SecurityReportSummary != nil {
		if err := m.SecurityReportSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_report_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_report_summary")
			}
			return err
		}
	}

	return nil
}

func (m *PackageBase) validateSignatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Signatures) { // not required
		return nil
	}

	for i := 0; i < len(m.Signatures); i++ {

		if err := m.Signatures[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signatures" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PackageBase) validateTs(formats strfmt.Registry) error {

	if err := validate.Required("ts", "body", m.Ts); err != nil {
		return err
	}

	return nil
}

func (m *PackageBase) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this package base based on the context it is used
func (m *PackageBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityReportSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageBase) contextValidateRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.Repository != nil {
		if err := m.Repository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *PackageBase) contextValidateSecurityReportSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityReportSummary != nil {
		if err := m.SecurityReportSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_report_summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_report_summary")
			}
			return err
		}
	}

	return nil
}

func (m *PackageBase) contextValidateSignatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Signatures); i++ {

		if err := m.Signatures[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signatures" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageBase) UnmarshalBinary(b []byte) error {
	var res PackageBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
