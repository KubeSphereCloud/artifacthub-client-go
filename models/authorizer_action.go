// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthorizerAction AuthorizerAction
//
// Authorization policy action:
// * `all` - All actions
// * `addOrganizationMember` - Add member to organization
// * `addOrganizationRepository` - Add repository to organization
// * `deleteOrganization` - Delete organization
// * `deleteOrganizationMember` - Delete member from organization
// * `deleteOrganizationRepository` - Delete repository from organization
// * `getAuthorizationPolicy` - Get authorization policy
// * `transferOrganizationRepository` - Transfer repository from organization
// * `updateAuthorizationPolicy` - Update authorization policy
// * `updateOrganization` - Update organization
// * `updateOrganizationRepository` - Update repository from organization
//
// swagger:model AuthorizerAction
type AuthorizerAction string

func NewAuthorizerAction(value AuthorizerAction) *AuthorizerAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthorizerAction.
func (m AuthorizerAction) Pointer() *AuthorizerAction {
	return &m
}

const (

	// AuthorizerActionAll captures enum value "all"
	AuthorizerActionAll AuthorizerAction = "all"

	// AuthorizerActionAddOrganizationMember captures enum value "addOrganizationMember"
	AuthorizerActionAddOrganizationMember AuthorizerAction = "addOrganizationMember"

	// AuthorizerActionAddOrganizationRepository captures enum value "addOrganizationRepository"
	AuthorizerActionAddOrganizationRepository AuthorizerAction = "addOrganizationRepository"

	// AuthorizerActionDeleteOrganization captures enum value "deleteOrganization"
	AuthorizerActionDeleteOrganization AuthorizerAction = "deleteOrganization"

	// AuthorizerActionDeleteOrganizationMember captures enum value "deleteOrganizationMember"
	AuthorizerActionDeleteOrganizationMember AuthorizerAction = "deleteOrganizationMember"

	// AuthorizerActionDeleteOrganizationRepository captures enum value "deleteOrganizationRepository"
	AuthorizerActionDeleteOrganizationRepository AuthorizerAction = "deleteOrganizationRepository"

	// AuthorizerActionGetAuthorizationPolicy captures enum value "getAuthorizationPolicy"
	AuthorizerActionGetAuthorizationPolicy AuthorizerAction = "getAuthorizationPolicy"

	// AuthorizerActionTransferOrganizationRepository captures enum value "transferOrganizationRepository"
	AuthorizerActionTransferOrganizationRepository AuthorizerAction = "transferOrganizationRepository"

	// AuthorizerActionUpdateAuthorizationPolicy captures enum value "updateAuthorizationPolicy"
	AuthorizerActionUpdateAuthorizationPolicy AuthorizerAction = "updateAuthorizationPolicy"

	// AuthorizerActionUpdateOrganization captures enum value "updateOrganization"
	AuthorizerActionUpdateOrganization AuthorizerAction = "updateOrganization"

	// AuthorizerActionUpdateOrganizationRepository captures enum value "updateOrganizationRepository"
	AuthorizerActionUpdateOrganizationRepository AuthorizerAction = "updateOrganizationRepository"
)

// for schema
var authorizerActionEnum []interface{}

func init() {
	var res []AuthorizerAction
	if err := json.Unmarshal([]byte(`["all","addOrganizationMember","addOrganizationRepository","deleteOrganization","deleteOrganizationMember","deleteOrganizationRepository","getAuthorizationPolicy","transferOrganizationRepository","updateAuthorizationPolicy","updateOrganization","updateOrganizationRepository"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authorizerActionEnum = append(authorizerActionEnum, v)
	}
}

func (m AuthorizerAction) validateAuthorizerActionEnum(path, location string, value AuthorizerAction) error {
	if err := validate.EnumCase(path, location, value, authorizerActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this authorizer action
func (m AuthorizerAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthorizerActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this authorizer action based on context it is used
func (m AuthorizerAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
