// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Data3 Data3
//
// swagger:model Data3
type Data3 struct {

	// api version
	// Example: v2
	APIVersion string `json:"apiVersion,omitempty"`

	// dependencies
	Dependencies *Dependencies `json:"dependencies,omitempty"`

	// kube version
	// Example: \u003e=1.16.0-0
	KubeVersion string `json:"kubeVersion,omitempty"`

	// type
	// Example: application
	Type string `json:"type,omitempty"`
}

// Validate validates this data3
func (m *Data3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Data3) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	if m.Dependencies != nil {
		if err := m.Dependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data3 based on the context it is used
func (m *Data3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Data3) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.Dependencies != nil {
		if err := m.Dependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Data3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Data3) UnmarshalBinary(b []byte) error {
	var res Data3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
