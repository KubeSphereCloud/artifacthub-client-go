// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookNotification WebhookNotification
//
// swagger:model WebhookNotification
type WebhookNotification struct {

	// created at
	// Required: true
	CreatedAt *int32 `json:"created_at"`

	// error
	// Example: error
	Error string `json:"error,omitempty"`

	// notification id
	// Required: true
	// Format: uuid
	NotificationID *strfmt.UUID `json:"notification_id"`

	// processed
	// Required: true
	Processed *bool `json:"processed"`

	// processed at
	// Required: true
	ProcessedAt *int32 `json:"processed_at"`
}

// Validate validates this webhook notification
func (m *WebhookNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookNotification) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *WebhookNotification) validateNotificationID(formats strfmt.Registry) error {

	if err := validate.Required("notification_id", "body", m.NotificationID); err != nil {
		return err
	}

	if err := validate.FormatOf("notification_id", "body", "uuid", m.NotificationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebhookNotification) validateProcessed(formats strfmt.Registry) error {

	if err := validate.Required("processed", "body", m.Processed); err != nil {
		return err
	}

	return nil
}

func (m *WebhookNotification) validateProcessedAt(formats strfmt.Registry) error {

	if err := validate.Required("processed_at", "body", m.ProcessedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this webhook notification based on context it is used
func (m *WebhookNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WebhookNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookNotification) UnmarshalBinary(b []byte) error {
	var res WebhookNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
