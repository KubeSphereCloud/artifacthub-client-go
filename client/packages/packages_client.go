// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new packages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for packages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddProductionUsage(params *AddProductionUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProductionUsageNoContent, error)

	DeleteProductionUsage(params *DeleteProductionUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProductionUsageNoContent, error)

	GenerateChangelogMD(params *GenerateChangelogMDParams, opts ...ClientOption) (*GenerateChangelogMDOK, error)

	GetBackstagePluginsDetails(params *GetBackstagePluginsDetailsParams, opts ...ClientOption) (*GetBackstagePluginsDetailsOK, error)

	GetBackstagePluginsVersionDetails(params *GetBackstagePluginsVersionDetailsParams, opts ...ClientOption) (*GetBackstagePluginsVersionDetailsOK, error)

	GetChartValues(params *GetChartValuesParams, opts ...ClientOption) (*GetChartValuesOK, error)

	GetContainerImageDetails(params *GetContainerImageDetailsParams, opts ...ClientOption) (*GetContainerImageDetailsOK, error)

	GetContainerImageVersionDetails(params *GetContainerImageVersionDetailsParams, opts ...ClientOption) (*GetContainerImageVersionDetailsOK, error)

	GetCoreDNSPluginDetails(params *GetCoreDNSPluginDetailsParams, opts ...ClientOption) (*GetCoreDNSPluginDetailsOK, error)

	GetCoreDNSPluginVersionDetails(params *GetCoreDNSPluginVersionDetailsParams, opts ...ClientOption) (*GetCoreDNSPluginVersionDetailsOK, error)

	GetFalcoRulesDetails(params *GetFalcoRulesDetailsParams, opts ...ClientOption) (*GetFalcoRulesDetailsOK, error)

	GetFalcoRulesVersionDetails(params *GetFalcoRulesVersionDetailsParams, opts ...ClientOption) (*GetFalcoRulesVersionDetailsOK, error)

	GetGatekeeperPoliciesDetails(params *GetGatekeeperPoliciesDetailsParams, opts ...ClientOption) (*GetGatekeeperPoliciesDetailsOK, error)

	GetGatekeeperPoliciesVersionDetails(params *GetGatekeeperPoliciesVersionDetailsParams, opts ...ClientOption) (*GetGatekeeperPoliciesVersionDetailsOK, error)

	GetHelmChartTemplates(params *GetHelmChartTemplatesParams, opts ...ClientOption) (*GetHelmChartTemplatesOK, error)

	GetHelmPackageDetails(params *GetHelmPackageDetailsParams, opts ...ClientOption) (*GetHelmPackageDetailsOK, error)

	GetHelmPackageVersionDetails(params *GetHelmPackageVersionDetailsParams, opts ...ClientOption) (*GetHelmPackageVersionDetailsOK, error)

	GetHelmPluginDetails(params *GetHelmPluginDetailsParams, opts ...ClientOption) (*GetHelmPluginDetailsOK, error)

	GetHelmPluginVersionDetails(params *GetHelmPluginVersionDetailsParams, opts ...ClientOption) (*GetHelmPluginVersionDetailsOK, error)

	GetKedaScalerDetails(params *GetKedaScalerDetailsParams, opts ...ClientOption) (*GetKedaScalerDetailsOK, error)

	GetKedaScalerVersionDetails(params *GetKedaScalerVersionDetailsParams, opts ...ClientOption) (*GetKedaScalerVersionDetailsOK, error)

	GetKeptnIntegrationsDetails(params *GetKeptnIntegrationsDetailsParams, opts ...ClientOption) (*GetKeptnIntegrationsDetailsOK, error)

	GetKeptnIntegrationsVersionDetails(params *GetKeptnIntegrationsVersionDetailsParams, opts ...ClientOption) (*GetKeptnIntegrationsVersionDetailsOK, error)

	GetKnativeClientPluginIntegrationsDetails(params *GetKnativeClientPluginIntegrationsDetailsParams, opts ...ClientOption) (*GetKnativeClientPluginIntegrationsDetailsOK, error)

	GetKnativeClientPluginsVersionDetails(params *GetKnativeClientPluginsVersionDetailsParams, opts ...ClientOption) (*GetKnativeClientPluginsVersionDetailsOK, error)

	GetKubectlPluginDetails(params *GetKubectlPluginDetailsParams, opts ...ClientOption) (*GetKubectlPluginDetailsOK, error)

	GetKubectlPluginVersionDetails(params *GetKubectlPluginVersionDetailsParams, opts ...ClientOption) (*GetKubectlPluginVersionDetailsOK, error)

	GetKubewardenPoliciesDetails(params *GetKubewardenPoliciesDetailsParams, opts ...ClientOption) (*GetKubewardenPoliciesDetailsOK, error)

	GetKubewardenPoliciesVersionDetails(params *GetKubewardenPoliciesVersionDetailsParams, opts ...ClientOption) (*GetKubewardenPoliciesVersionDetailsOK, error)

	GetKyvernoPoliciesDetails(params *GetKyvernoPoliciesDetailsParams, opts ...ClientOption) (*GetKyvernoPoliciesDetailsOK, error)

	GetKyvernoPoliciesVersionDetails(params *GetKyvernoPoliciesVersionDetailsParams, opts ...ClientOption) (*GetKyvernoPoliciesVersionDetailsOK, error)

	GetOLMOperatorDetails(params *GetOLMOperatorDetailsParams, opts ...ClientOption) (*GetOLMOperatorDetailsOK, error)

	GetOLMOperatorVersionDetails(params *GetOLMOperatorVersionDetailsParams, opts ...ClientOption) (*GetOLMOperatorVersionDetailsOK, error)

	GetOPAPoliciesDetails(params *GetOPAPoliciesDetailsParams, opts ...ClientOption) (*GetOPAPoliciesDetailsOK, error)

	GetOPAPoliciesVersionDetails(params *GetOPAPoliciesVersionDetailsParams, opts ...ClientOption) (*GetOPAPoliciesVersionDetailsOK, error)

	GetPackageChangelog(params *GetPackageChangelogParams, opts ...ClientOption) (*GetPackageChangelogOK, error)

	GetPackageSecurityReport(params *GetPackageSecurityReportParams, opts ...ClientOption) (*GetPackageSecurityReportOK, error)

	GetPackageStars(params *GetPackageStarsParams, opts ...ClientOption) (*GetPackageStarsOK, error)

	GetPackageStats(params *GetPackageStatsParams, opts ...ClientOption) (*GetPackageStatsOK, error)

	GetPackageSummary(params *GetPackageSummaryParams, opts ...ClientOption) (*GetPackageSummaryOK, error)

	GetPackageValuesSchema(params *GetPackageValuesSchemaParams, opts ...ClientOption) (*GetPackageValuesSchemaOK, error)

	GetPackageViews(params *GetPackageViewsParams, opts ...ClientOption) (*GetPackageViewsOK, error)

	GetProductionUsage(params *GetProductionUsageParams, opts ...ClientOption) (*GetProductionUsageOK, error)

	GetRandomPackages(params *GetRandomPackagesParams, opts ...ClientOption) (*GetRandomPackagesOK, error)

	GetStarredPackagesByUser(params *GetStarredPackagesByUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStarredPackagesByUserOK, error)

	GetTektonPipelineDetails(params *GetTektonPipelineDetailsParams, opts ...ClientOption) (*GetTektonPipelineDetailsOK, error)

	GetTektonPipelineVersionDetails(params *GetTektonPipelineVersionDetailsParams, opts ...ClientOption) (*GetTektonPipelineVersionDetailsOK, error)

	GetTektonTaskDetails(params *GetTektonTaskDetailsParams, opts ...ClientOption) (*GetTektonTaskDetailsOK, error)

	GetTektonTaskVersionDetails(params *GetTektonTaskVersionDetailsParams, opts ...ClientOption) (*GetTektonTaskVersionDetailsOK, error)

	GetTinkerbellActionsDetails(params *GetTinkerbellActionsDetailsParams, opts ...ClientOption) (*GetTinkerbellActionsDetailsOK, error)

	GetTinkerbellActionsVersionDetails(params *GetTinkerbellActionsVersionDetailsParams, opts ...ClientOption) (*GetTinkerbellActionsVersionDetailsOK, error)

	SearchPackages(params *SearchPackagesParams, opts ...ClientOption) (*SearchPackagesOK, error)

	TogglePackageStar(params *TogglePackageStarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TogglePackageStarNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddProductionUsage adds production usage

Add organization to package's production users list
*/
func (a *Client) AddProductionUsage(params *AddProductionUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProductionUsageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProductionUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProductionUsage",
		Method:             "POST",
		PathPattern:        "/packages/{repoKindParam}/{repoName}/{packageName}/production-usage/${orgName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProductionUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProductionUsageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProductionUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProductionUsage deletes production usage

Delete organization from package's production usage list
*/
func (a *Client) DeleteProductionUsage(params *DeleteProductionUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProductionUsageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductionUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProductionUsage",
		Method:             "DELETE",
		PathPattern:        "/packages/{repoKindParam}/{repoName}/{packageName}/production-usage/${orgName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProductionUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProductionUsageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProductionUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateChangelogMD generates changelog m d

Get package's changelog in markdown format
*/
func (a *Client) GenerateChangelogMD(params *GenerateChangelogMDParams, opts ...ClientOption) (*GenerateChangelogMDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateChangelogMDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateChangelogMD",
		Method:             "GET",
		PathPattern:        "/packages/{repoKindParam}/{repoName}/{packageName}/changelog.md",
		ProducesMediaTypes: []string{"application/json", "text/markdown"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateChangelogMDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateChangelogMDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateChangelogMD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackstagePluginsDetails gets backstage plugins details

Get package details
*/
func (a *Client) GetBackstagePluginsDetails(params *GetBackstagePluginsDetailsParams, opts ...ClientOption) (*GetBackstagePluginsDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackstagePluginsDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackstagePluginsDetails",
		Method:             "GET",
		PathPattern:        "/packages/backstage/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackstagePluginsDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackstagePluginsDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackstagePluginsDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackstagePluginsVersionDetails gets backstage plugins version details

Get package version details
*/
func (a *Client) GetBackstagePluginsVersionDetails(params *GetBackstagePluginsVersionDetailsParams, opts ...ClientOption) (*GetBackstagePluginsVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackstagePluginsVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackstagePluginsVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/backstage/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackstagePluginsVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackstagePluginsVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackstagePluginsVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChartValues gets chart values

Get chart values
*/
func (a *Client) GetChartValues(params *GetChartValuesParams, opts ...ClientOption) (*GetChartValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChartValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChartValues",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/{version}/values",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChartValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChartValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChartValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContainerImageDetails gets container image details

Get container image details
*/
func (a *Client) GetContainerImageDetails(params *GetContainerImageDetailsParams, opts ...ClientOption) (*GetContainerImageDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainerImageDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getContainerImageDetails",
		Method:             "GET",
		PathPattern:        "/packages/container/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContainerImageDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContainerImageDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContainerImageDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContainerImageVersionDetails gets container image version details

Get container image details
*/
func (a *Client) GetContainerImageVersionDetails(params *GetContainerImageVersionDetailsParams, opts ...ClientOption) (*GetContainerImageVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainerImageVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getContainerImageVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/container/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContainerImageVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContainerImageVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContainerImageVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCoreDNSPluginDetails gets core DNS plugin details

Get package details
*/
func (a *Client) GetCoreDNSPluginDetails(params *GetCoreDNSPluginDetailsParams, opts ...ClientOption) (*GetCoreDNSPluginDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoreDNSPluginDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCoreDNSPluginDetails",
		Method:             "GET",
		PathPattern:        "/packages/coredns/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCoreDNSPluginDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCoreDNSPluginDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCoreDNSPluginDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCoreDNSPluginVersionDetails gets core DNS plugin version details

Get package details
*/
func (a *Client) GetCoreDNSPluginVersionDetails(params *GetCoreDNSPluginVersionDetailsParams, opts ...ClientOption) (*GetCoreDNSPluginVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoreDNSPluginVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCoreDNSPluginVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/coredns/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCoreDNSPluginVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCoreDNSPluginVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCoreDNSPluginVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFalcoRulesDetails gets falco rules details

Get package details
*/
func (a *Client) GetFalcoRulesDetails(params *GetFalcoRulesDetailsParams, opts ...ClientOption) (*GetFalcoRulesDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFalcoRulesDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFalcoRulesDetails",
		Method:             "GET",
		PathPattern:        "/packages/falco/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFalcoRulesDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFalcoRulesDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFalcoRulesDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFalcoRulesVersionDetails gets falco rules version details

Get package version details
*/
func (a *Client) GetFalcoRulesVersionDetails(params *GetFalcoRulesVersionDetailsParams, opts ...ClientOption) (*GetFalcoRulesVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFalcoRulesVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFalcoRulesVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/falco/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFalcoRulesVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFalcoRulesVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFalcoRulesVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatekeeperPoliciesDetails gets gatekeeper policies details

Get package details
*/
func (a *Client) GetGatekeeperPoliciesDetails(params *GetGatekeeperPoliciesDetailsParams, opts ...ClientOption) (*GetGatekeeperPoliciesDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatekeeperPoliciesDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatekeeperPoliciesDetails",
		Method:             "GET",
		PathPattern:        "/packages/gatekeeper/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatekeeperPoliciesDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatekeeperPoliciesDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatekeeperPoliciesDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGatekeeperPoliciesVersionDetails gets gatekeeper policies version details

Get package version details
*/
func (a *Client) GetGatekeeperPoliciesVersionDetails(params *GetGatekeeperPoliciesVersionDetailsParams, opts ...ClientOption) (*GetGatekeeperPoliciesVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatekeeperPoliciesVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatekeeperPoliciesVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/gatekeeper/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatekeeperPoliciesVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatekeeperPoliciesVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatekeeperPoliciesVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmChartTemplates gets helm chart templates

Get the templates for a Helm chart package
*/
func (a *Client) GetHelmChartTemplates(params *GetHelmChartTemplatesParams, opts ...ClientOption) (*GetHelmChartTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmChartTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHelmChartTemplates",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/{version}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHelmChartTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmChartTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHelmChartTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmPackageDetails gets helm package details

Get package details
*/
func (a *Client) GetHelmPackageDetails(params *GetHelmPackageDetailsParams, opts ...ClientOption) (*GetHelmPackageDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmPackageDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHelmPackageDetails",
		Method:             "GET",
		PathPattern:        "/packages/helm/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHelmPackageDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmPackageDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHelmPackageDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmPackageVersionDetails gets helm package version details

Get package version details
*/
func (a *Client) GetHelmPackageVersionDetails(params *GetHelmPackageVersionDetailsParams, opts ...ClientOption) (*GetHelmPackageVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmPackageVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHelmPackageVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/helm/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHelmPackageVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmPackageVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHelmPackageVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmPluginDetails gets helm plugin details

Get package details
*/
func (a *Client) GetHelmPluginDetails(params *GetHelmPluginDetailsParams, opts ...ClientOption) (*GetHelmPluginDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmPluginDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHelmPluginDetails",
		Method:             "GET",
		PathPattern:        "/packages/helm-plugin/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHelmPluginDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmPluginDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHelmPluginDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHelmPluginVersionDetails gets helm plugin version details

Get package version details
*/
func (a *Client) GetHelmPluginVersionDetails(params *GetHelmPluginVersionDetailsParams, opts ...ClientOption) (*GetHelmPluginVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHelmPluginVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHelmPluginVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/helm-plugin/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHelmPluginVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHelmPluginVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHelmPluginVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKedaScalerDetails gets keda scaler details

Get package details
*/
func (a *Client) GetKedaScalerDetails(params *GetKedaScalerDetailsParams, opts ...ClientOption) (*GetKedaScalerDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKedaScalerDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKedaScalerDetails",
		Method:             "GET",
		PathPattern:        "/packages/keda-scaler/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKedaScalerDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKedaScalerDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKedaScalerDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKedaScalerVersionDetails gets keda scaler version details

Get package version details
*/
func (a *Client) GetKedaScalerVersionDetails(params *GetKedaScalerVersionDetailsParams, opts ...ClientOption) (*GetKedaScalerVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKedaScalerVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKedaScalerVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/keda-scaler/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKedaScalerVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKedaScalerVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKedaScalerVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKeptnIntegrationsDetails gets keptn integrations details

Get package details
*/
func (a *Client) GetKeptnIntegrationsDetails(params *GetKeptnIntegrationsDetailsParams, opts ...ClientOption) (*GetKeptnIntegrationsDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeptnIntegrationsDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKeptnIntegrationsDetails",
		Method:             "GET",
		PathPattern:        "/packages/keptn/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKeptnIntegrationsDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKeptnIntegrationsDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKeptnIntegrationsDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKeptnIntegrationsVersionDetails gets keptn integrations version details

Get package version details
*/
func (a *Client) GetKeptnIntegrationsVersionDetails(params *GetKeptnIntegrationsVersionDetailsParams, opts ...ClientOption) (*GetKeptnIntegrationsVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeptnIntegrationsVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKeptnIntegrationsVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/keptn/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKeptnIntegrationsVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKeptnIntegrationsVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKeptnIntegrationsVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKnativeClientPluginIntegrationsDetails gets knative client plugin integrations details

Get package details
*/
func (a *Client) GetKnativeClientPluginIntegrationsDetails(params *GetKnativeClientPluginIntegrationsDetailsParams, opts ...ClientOption) (*GetKnativeClientPluginIntegrationsDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKnativeClientPluginIntegrationsDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKnativeClientPluginIntegrationsDetails",
		Method:             "GET",
		PathPattern:        "/packages/knative-client-plugin/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnativeClientPluginIntegrationsDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKnativeClientPluginIntegrationsDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKnativeClientPluginIntegrationsDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKnativeClientPluginsVersionDetails gets knative client plugins version details

Get package version details
*/
func (a *Client) GetKnativeClientPluginsVersionDetails(params *GetKnativeClientPluginsVersionDetailsParams, opts ...ClientOption) (*GetKnativeClientPluginsVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKnativeClientPluginsVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKnativeClientPluginsVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/knative-client-plugin/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKnativeClientPluginsVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKnativeClientPluginsVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKnativeClientPluginsVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubectlPluginDetails gets kubectl plugin details

Get package details
*/
func (a *Client) GetKubectlPluginDetails(params *GetKubectlPluginDetailsParams, opts ...ClientOption) (*GetKubectlPluginDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubectlPluginDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubectlPluginDetails",
		Method:             "GET",
		PathPattern:        "/packages/krew/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubectlPluginDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubectlPluginDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubectlPluginDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubectlPluginVersionDetails gets kubectl plugin version details

Get package version details
*/
func (a *Client) GetKubectlPluginVersionDetails(params *GetKubectlPluginVersionDetailsParams, opts ...ClientOption) (*GetKubectlPluginVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubectlPluginVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubectlPluginVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/krew/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubectlPluginVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubectlPluginVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubectlPluginVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubewardenPoliciesDetails gets kubewarden policies details

Get package details
*/
func (a *Client) GetKubewardenPoliciesDetails(params *GetKubewardenPoliciesDetailsParams, opts ...ClientOption) (*GetKubewardenPoliciesDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubewardenPoliciesDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubewardenPoliciesDetails",
		Method:             "GET",
		PathPattern:        "/packages/kubewarden/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubewardenPoliciesDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubewardenPoliciesDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubewardenPoliciesDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubewardenPoliciesVersionDetails gets kubewarden policies version details

Get package version details
*/
func (a *Client) GetKubewardenPoliciesVersionDetails(params *GetKubewardenPoliciesVersionDetailsParams, opts ...ClientOption) (*GetKubewardenPoliciesVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubewardenPoliciesVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubewardenPoliciesVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/kubewarden/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubewardenPoliciesVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubewardenPoliciesVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubewardenPoliciesVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKyvernoPoliciesDetails gets kyverno policies details

Get package details
*/
func (a *Client) GetKyvernoPoliciesDetails(params *GetKyvernoPoliciesDetailsParams, opts ...ClientOption) (*GetKyvernoPoliciesDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKyvernoPoliciesDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKyvernoPoliciesDetails",
		Method:             "GET",
		PathPattern:        "/packages/kyverno/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKyvernoPoliciesDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKyvernoPoliciesDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKyvernoPoliciesDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKyvernoPoliciesVersionDetails gets kyverno policies version details

Get package version details
*/
func (a *Client) GetKyvernoPoliciesVersionDetails(params *GetKyvernoPoliciesVersionDetailsParams, opts ...ClientOption) (*GetKyvernoPoliciesVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKyvernoPoliciesVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKyvernoPoliciesVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/kyverno/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKyvernoPoliciesVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKyvernoPoliciesVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKyvernoPoliciesVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOLMOperatorDetails gets o l m operator details

Get package details
*/
func (a *Client) GetOLMOperatorDetails(params *GetOLMOperatorDetailsParams, opts ...ClientOption) (*GetOLMOperatorDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOLMOperatorDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOLMOperatorDetails",
		Method:             "GET",
		PathPattern:        "/packages/olm/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOLMOperatorDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOLMOperatorDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOLMOperatorDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOLMOperatorVersionDetails gets o l m operator version details

Get package version details
*/
func (a *Client) GetOLMOperatorVersionDetails(params *GetOLMOperatorVersionDetailsParams, opts ...ClientOption) (*GetOLMOperatorVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOLMOperatorVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOLMOperatorVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/olm/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOLMOperatorVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOLMOperatorVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOLMOperatorVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOPAPoliciesDetails gets o p a policies details

Get package details
*/
func (a *Client) GetOPAPoliciesDetails(params *GetOPAPoliciesDetailsParams, opts ...ClientOption) (*GetOPAPoliciesDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOPAPoliciesDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOPAPoliciesDetails",
		Method:             "GET",
		PathPattern:        "/packages/opa/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOPAPoliciesDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOPAPoliciesDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOPAPoliciesDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOPAPoliciesVersionDetails gets o p a policies version details

Get package version details
*/
func (a *Client) GetOPAPoliciesVersionDetails(params *GetOPAPoliciesVersionDetailsParams, opts ...ClientOption) (*GetOPAPoliciesVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOPAPoliciesVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOPAPoliciesVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/opa/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOPAPoliciesVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOPAPoliciesVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOPAPoliciesVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageChangelog gets package changelog

Get package changelogs
*/
func (a *Client) GetPackageChangelog(params *GetPackageChangelogParams, opts ...ClientOption) (*GetPackageChangelogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageChangelogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageChangelog",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/changelog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageChangelogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageChangelogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageChangelog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageSecurityReport gets package security report

Get package security report
*/
func (a *Client) GetPackageSecurityReport(params *GetPackageSecurityReportParams, opts ...ClientOption) (*GetPackageSecurityReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageSecurityReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageSecurityReport",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/{version}/security-report",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageSecurityReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageSecurityReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageSecurityReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageStars gets package stars

Get package stars
*/
func (a *Client) GetPackageStars(params *GetPackageStarsParams, opts ...ClientOption) (*GetPackageStarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageStarsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageStars",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/stars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageStarsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageStarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageStars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageStats gets package stats

Get the number of packages and releases registered
*/
func (a *Client) GetPackageStats(params *GetPackageStatsParams, opts ...ClientOption) (*GetPackageStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageStats",
		Method:             "GET",
		PathPattern:        "/packages/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageSummary gets package summary

Get package summary details
*/
func (a *Client) GetPackageSummary(params *GetPackageSummaryParams, opts ...ClientOption) (*GetPackageSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageSummary",
		Method:             "GET",
		PathPattern:        "/packages/{repoKindParam}/{repoName}/{packageName}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageValuesSchema gets package values schema

Get package values schema
*/
func (a *Client) GetPackageValuesSchema(params *GetPackageValuesSchemaParams, opts ...ClientOption) (*GetPackageValuesSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageValuesSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageValuesSchema",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/{version}/values-schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageValuesSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageValuesSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageValuesSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageViews gets package views

Get the views of the package provided
*/
func (a *Client) GetPackageViews(params *GetPackageViewsParams, opts ...ClientOption) (*GetPackageViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageViews",
		Method:             "GET",
		PathPattern:        "/packages/{packageID}/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageViewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageViews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProductionUsage gets production usage

Get a summary of which of the organizations the user belongs to are using the package in production
*/
func (a *Client) GetProductionUsage(params *GetProductionUsageParams, opts ...ClientOption) (*GetProductionUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductionUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProductionUsage",
		Method:             "GET",
		PathPattern:        "/packages/{repoKindParam}/{repoName}/{packageName}/production-usage",
		ProducesMediaTypes: []string{"application/json", "text/markdown"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductionUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductionUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductionUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRandomPackages gets random packages

Get some random packages
*/
func (a *Client) GetRandomPackages(params *GetRandomPackagesParams, opts ...ClientOption) (*GetRandomPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRandomPackagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRandomPackages",
		Method:             "GET",
		PathPattern:        "/packages/random",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRandomPackagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRandomPackagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRandomPackages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStarredPackagesByUser gets starred packages by user

Get packages starred by user
*/
func (a *Client) GetStarredPackagesByUser(params *GetStarredPackagesByUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStarredPackagesByUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStarredPackagesByUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStarredPackagesByUser",
		Method:             "GET",
		PathPattern:        "/packages/starred",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStarredPackagesByUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStarredPackagesByUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStarredPackagesByUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTektonPipelineDetails gets tekton pipeline details

Get package details
*/
func (a *Client) GetTektonPipelineDetails(params *GetTektonPipelineDetailsParams, opts ...ClientOption) (*GetTektonPipelineDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTektonPipelineDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTektonPipelineDetails",
		Method:             "GET",
		PathPattern:        "/packages/tekton-pipeline/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTektonPipelineDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTektonPipelineDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTektonPipelineDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTektonPipelineVersionDetails gets tekton pipeline version details

Get package version details
*/
func (a *Client) GetTektonPipelineVersionDetails(params *GetTektonPipelineVersionDetailsParams, opts ...ClientOption) (*GetTektonPipelineVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTektonPipelineVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTektonPipelineVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/tekton-pipeline/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTektonPipelineVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTektonPipelineVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTektonPipelineVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTektonTaskDetails gets tekton task details

Get package details
*/
func (a *Client) GetTektonTaskDetails(params *GetTektonTaskDetailsParams, opts ...ClientOption) (*GetTektonTaskDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTektonTaskDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTektonTaskDetails",
		Method:             "GET",
		PathPattern:        "/packages/tekton-task/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTektonTaskDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTektonTaskDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTektonTaskDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTektonTaskVersionDetails gets tekton task version details

Get package version details
*/
func (a *Client) GetTektonTaskVersionDetails(params *GetTektonTaskVersionDetailsParams, opts ...ClientOption) (*GetTektonTaskVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTektonTaskVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTektonTaskVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/tekton-task/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTektonTaskVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTektonTaskVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTektonTaskVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTinkerbellActionsDetails gets tinkerbell actions details

Get package details
*/
func (a *Client) GetTinkerbellActionsDetails(params *GetTinkerbellActionsDetailsParams, opts ...ClientOption) (*GetTinkerbellActionsDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTinkerbellActionsDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTinkerbellActionsDetails",
		Method:             "GET",
		PathPattern:        "/packages/tbaction/{repoName}/{packageName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTinkerbellActionsDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTinkerbellActionsDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTinkerbellActionsDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTinkerbellActionsVersionDetails gets tinkerbell actions version details

Get package version details
*/
func (a *Client) GetTinkerbellActionsVersionDetails(params *GetTinkerbellActionsVersionDetailsParams, opts ...ClientOption) (*GetTinkerbellActionsVersionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTinkerbellActionsVersionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTinkerbellActionsVersionDetails",
		Method:             "GET",
		PathPattern:        "/packages/tbaction/{repoName}/{packageName}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTinkerbellActionsVersionDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTinkerbellActionsVersionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTinkerbellActionsVersionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPackages searches packages

Search packages that meet the provided criteria
*/
func (a *Client) SearchPackages(params *SearchPackagesParams, opts ...ClientOption) (*SearchPackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPackagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchPackages",
		Method:             "GET",
		PathPattern:        "/packages/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchPackagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPackagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchPackages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TogglePackageStar toggles package star

Toggle package's star
*/
func (a *Client) TogglePackageStar(params *TogglePackageStarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TogglePackageStarNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTogglePackageStarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "togglePackageStar",
		Method:             "PUT",
		PathPattern:        "/packages/{packageID}/stars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TogglePackageStarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TogglePackageStarNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for togglePackageStar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
