// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetHelmPackageDetailsReader is a Reader for the GetHelmPackageDetails structure.
type GetHelmPackageDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHelmPackageDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHelmPackageDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHelmPackageDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetHelmPackageDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHelmPackageDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHelmPackageDetailsOK creates a GetHelmPackageDetailsOK with default headers values
func NewGetHelmPackageDetailsOK() *GetHelmPackageDetailsOK {
	return &GetHelmPackageDetailsOK{}
}

/*
GetHelmPackageDetailsOK describes a response with status code 200, with default header values.

GetHelmPackageDetailsOK get helm package details o k
*/
type GetHelmPackageDetailsOK struct {
	Payload *models.HelmPackage
}

// IsSuccess returns true when this get helm package details o k response has a 2xx status code
func (o *GetHelmPackageDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get helm package details o k response has a 3xx status code
func (o *GetHelmPackageDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm package details o k response has a 4xx status code
func (o *GetHelmPackageDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get helm package details o k response has a 5xx status code
func (o *GetHelmPackageDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm package details o k response a status code equal to that given
func (o *GetHelmPackageDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetHelmPackageDetailsOK) Error() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsOK  %+v", 200, o.Payload)
}

func (o *GetHelmPackageDetailsOK) String() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsOK  %+v", 200, o.Payload)
}

func (o *GetHelmPackageDetailsOK) GetPayload() *models.HelmPackage {
	return o.Payload
}

func (o *GetHelmPackageDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HelmPackage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmPackageDetailsNotFound creates a GetHelmPackageDetailsNotFound with default headers values
func NewGetHelmPackageDetailsNotFound() *GetHelmPackageDetailsNotFound {
	return &GetHelmPackageDetailsNotFound{}
}

/*
GetHelmPackageDetailsNotFound describes a response with status code 404, with default header values.

The requested resource was not found
*/
type GetHelmPackageDetailsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get helm package details not found response has a 2xx status code
func (o *GetHelmPackageDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm package details not found response has a 3xx status code
func (o *GetHelmPackageDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm package details not found response has a 4xx status code
func (o *GetHelmPackageDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get helm package details not found response has a 5xx status code
func (o *GetHelmPackageDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm package details not found response a status code equal to that given
func (o *GetHelmPackageDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetHelmPackageDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsNotFound  %+v", 404, o.Payload)
}

func (o *GetHelmPackageDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsNotFound  %+v", 404, o.Payload)
}

func (o *GetHelmPackageDetailsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHelmPackageDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmPackageDetailsTooManyRequests creates a GetHelmPackageDetailsTooManyRequests with default headers values
func NewGetHelmPackageDetailsTooManyRequests() *GetHelmPackageDetailsTooManyRequests {
	return &GetHelmPackageDetailsTooManyRequests{}
}

/*
GetHelmPackageDetailsTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetHelmPackageDetailsTooManyRequests struct {
}

// IsSuccess returns true when this get helm package details too many requests response has a 2xx status code
func (o *GetHelmPackageDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm package details too many requests response has a 3xx status code
func (o *GetHelmPackageDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm package details too many requests response has a 4xx status code
func (o *GetHelmPackageDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get helm package details too many requests response has a 5xx status code
func (o *GetHelmPackageDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm package details too many requests response a status code equal to that given
func (o *GetHelmPackageDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetHelmPackageDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsTooManyRequests ", 429)
}

func (o *GetHelmPackageDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsTooManyRequests ", 429)
}

func (o *GetHelmPackageDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHelmPackageDetailsInternalServerError creates a GetHelmPackageDetailsInternalServerError with default headers values
func NewGetHelmPackageDetailsInternalServerError() *GetHelmPackageDetailsInternalServerError {
	return &GetHelmPackageDetailsInternalServerError{}
}

/*
GetHelmPackageDetailsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetHelmPackageDetailsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get helm package details internal server error response has a 2xx status code
func (o *GetHelmPackageDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm package details internal server error response has a 3xx status code
func (o *GetHelmPackageDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm package details internal server error response has a 4xx status code
func (o *GetHelmPackageDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get helm package details internal server error response has a 5xx status code
func (o *GetHelmPackageDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get helm package details internal server error response a status code equal to that given
func (o *GetHelmPackageDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetHelmPackageDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHelmPackageDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /packages/helm/{repoName}/{packageName}][%d] getHelmPackageDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHelmPackageDetailsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHelmPackageDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
