// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatsResponse StatsResponse
// Example: {"generated_at":1615980004171,"organizations":{"running_total":[[1585612800000,3],[1585785600000,6],[1585872000000,7],[1586217600000,8]],"total":8},"packages":{"created_monthly":[[1583020800000,917],[1585699200000,52]],"running_total":[[1585612800000,917],[1585872000000,918],[1586736000000,937],[1586908800000,938],[1586995200000,949],[1587340800000,953],[1587427200000,955],[1587513600000,969]],"total":969,"views_daily":[[1639731010000,800],[1639644610000,820]]},"repositories":{"running_total":[[1585612800000,172],[1585872000000,173],[1586736000000,176],[1586908800000,177],[1586995200000,181]],"total":181},"snapshots":{"created_monthly":[[1583020800000,3906],[1585699200000,92]],"running_total":[[1585612800000,3906],[1585699200000,3922],[1585785600000,3935],[1585872000000,3948],[1586044800000,3951],[1586131200000,3959],[1586217600000,3981],[1586304000000,3998]],"total":3998},"users":{"running_total":[[1584403200000,3],[1584489600000,5],[1584576000000,6],[1584662400000,8],[1584921600000,9]],"total":9}}
//
// swagger:model StatsResponse
type StatsResponse struct {

	// generated at
	// Required: true
	GeneratedAt *int32 `json:"generated_at"`

	// organizations
	// Required: true
	Organizations *Organizations `json:"organizations"`

	// packages
	// Required: true
	Packages *Packages `json:"packages"`

	// repositories
	// Required: true
	Repositories *Repositories `json:"repositories"`

	// snapshots
	// Required: true
	Snapshots *Snapshots `json:"snapshots"`

	// users
	// Required: true
	Users *Users `json:"users"`
}

// Validate validates this stats response
func (m *StatsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneratedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatsResponse) validateGeneratedAt(formats strfmt.Registry) error {

	if err := validate.Required("generated_at", "body", m.GeneratedAt); err != nil {
		return err
	}

	return nil
}

func (m *StatsResponse) validateOrganizations(formats strfmt.Registry) error {

	if err := validate.Required("organizations", "body", m.Organizations); err != nil {
		return err
	}

	if m.Organizations != nil {
		if err := m.Organizations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizations")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) validatePackages(formats strfmt.Registry) error {

	if err := validate.Required("packages", "body", m.Packages); err != nil {
		return err
	}

	if m.Packages != nil {
		if err := m.Packages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packages")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) validateRepositories(formats strfmt.Registry) error {

	if err := validate.Required("repositories", "body", m.Repositories); err != nil {
		return err
	}

	if m.Repositories != nil {
		if err := m.Repositories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repositories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repositories")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) validateSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("snapshots", "body", m.Snapshots); err != nil {
		return err
	}

	if m.Snapshots != nil {
		if err := m.Snapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stats response based on the context it is used
func (m *StatsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepositories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatsResponse) contextValidateOrganizations(ctx context.Context, formats strfmt.Registry) error {

	if m.Organizations != nil {
		if err := m.Organizations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizations")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	if m.Packages != nil {
		if err := m.Packages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packages")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) contextValidateRepositories(ctx context.Context, formats strfmt.Registry) error {

	if m.Repositories != nil {
		if err := m.Repositories.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repositories")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repositories")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.Snapshots != nil {
		if err := m.Snapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *StatsResponse) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {
		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatsResponse) UnmarshalBinary(b []byte) error {
	var res StatsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
