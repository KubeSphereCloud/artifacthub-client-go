// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchRepositoriesParams creates a new SearchRepositoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchRepositoriesParams() *SearchRepositoriesParams {
	return &SearchRepositoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchRepositoriesParamsWithTimeout creates a new SearchRepositoriesParams object
// with the ability to set a timeout on a request.
func NewSearchRepositoriesParamsWithTimeout(timeout time.Duration) *SearchRepositoriesParams {
	return &SearchRepositoriesParams{
		timeout: timeout,
	}
}

// NewSearchRepositoriesParamsWithContext creates a new SearchRepositoriesParams object
// with the ability to set a context for a request.
func NewSearchRepositoriesParamsWithContext(ctx context.Context) *SearchRepositoriesParams {
	return &SearchRepositoriesParams{
		Context: ctx,
	}
}

// NewSearchRepositoriesParamsWithHTTPClient creates a new SearchRepositoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchRepositoriesParamsWithHTTPClient(client *http.Client) *SearchRepositoriesParams {
	return &SearchRepositoriesParams{
		HTTPClient: client,
	}
}

/*
SearchRepositoriesParams contains all the parameters to send to the API endpoint

	for the search repositories operation.

	Typically these are written to a http.Request.
*/
type SearchRepositoriesParams struct {

	/* Kind.

	   Repository kind:
	* `0` - Helm charts
	* `1` - Falco rules
	* `2` - OPA policies
	* `3` - OLM operators
	* `4` - Tinkerbell actions
	* `5` - Krew kubectl plugins
	* `6` - Helm plugins
	* `7` - Tekton tasks
	* `8` - KEDA scalers
	* `9` - Core DNS plugins
	* `10` - Keptn integrations
	* `11` - Tekton pipelines
	* `12` - Container images
	* `13` - Kubewarden policies
	* `14` - Gatekeeper policies
	* `15` - Kyverno policies
	* `16` - Knative client plugins
	* `17` - Backstage plugins
	*/
	Kind []float64

	/* Limit.

	   The number of items to return

	   Format: int32
	   Default: 20
	*/
	Limit *int32

	/* Name.

	   Repository name
	*/
	Name *string

	/* Offset.

	   The number of items to skip before starting to collect the result set

	   Format: int32
	*/
	Offset *int32

	/* Org.

	   List of organization names
	*/
	Org []string

	/* URL.

	   Repository url
	*/
	URL *string

	/* User.

	   List of aliases
	*/
	User []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchRepositoriesParams) WithDefaults() *SearchRepositoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchRepositoriesParams) SetDefaults() {
	var (
		limitDefault = int32(20)

		offsetDefault = int32(0)
	)

	val := SearchRepositoriesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search repositories params
func (o *SearchRepositoriesParams) WithTimeout(timeout time.Duration) *SearchRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search repositories params
func (o *SearchRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search repositories params
func (o *SearchRepositoriesParams) WithContext(ctx context.Context) *SearchRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search repositories params
func (o *SearchRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search repositories params
func (o *SearchRepositoriesParams) WithHTTPClient(client *http.Client) *SearchRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search repositories params
func (o *SearchRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKind adds the kind to the search repositories params
func (o *SearchRepositoriesParams) WithKind(kind []float64) *SearchRepositoriesParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the search repositories params
func (o *SearchRepositoriesParams) SetKind(kind []float64) {
	o.Kind = kind
}

// WithLimit adds the limit to the search repositories params
func (o *SearchRepositoriesParams) WithLimit(limit *int32) *SearchRepositoriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search repositories params
func (o *SearchRepositoriesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithName adds the name to the search repositories params
func (o *SearchRepositoriesParams) WithName(name *string) *SearchRepositoriesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the search repositories params
func (o *SearchRepositoriesParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the search repositories params
func (o *SearchRepositoriesParams) WithOffset(offset *int32) *SearchRepositoriesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search repositories params
func (o *SearchRepositoriesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrg adds the org to the search repositories params
func (o *SearchRepositoriesParams) WithOrg(org []string) *SearchRepositoriesParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the search repositories params
func (o *SearchRepositoriesParams) SetOrg(org []string) {
	o.Org = org
}

// WithURL adds the url to the search repositories params
func (o *SearchRepositoriesParams) WithURL(url *string) *SearchRepositoriesParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the search repositories params
func (o *SearchRepositoriesParams) SetURL(url *string) {
	o.URL = url
}

// WithUser adds the user to the search repositories params
func (o *SearchRepositoriesParams) WithUser(user []string) *SearchRepositoriesParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the search repositories params
func (o *SearchRepositoriesParams) SetUser(user []string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *SearchRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Kind != nil {

		// binding items for kind
		joinedKind := o.bindParamKind(reg)

		// query array param kind
		if err := r.SetQueryParam("kind", joinedKind...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Org != nil {

		// binding items for org
		joinedOrg := o.bindParamOrg(reg)

		// query array param org
		if err := r.SetQueryParam("org", joinedOrg...); err != nil {
			return err
		}
	}

	if o.URL != nil {

		// query param url
		var qrURL string

		if o.URL != nil {
			qrURL = *o.URL
		}
		qURL := qrURL
		if qURL != "" {

			if err := r.SetQueryParam("url", qURL); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// binding items for user
		joinedUser := o.bindParamUser(reg)

		// query array param user
		if err := r.SetQueryParam("user", joinedUser...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchRepositories binds the parameter kind
func (o *SearchRepositoriesParams) bindParamKind(formats strfmt.Registry) []string {
	kindIR := o.Kind

	var kindIC []string
	for _, kindIIR := range kindIR { // explode []float64

		kindIIV := swag.FormatFloat64(kindIIR) // float64 as string
		kindIC = append(kindIC, kindIIV)
	}

	// items.CollectionFormat: ""
	kindIS := swag.JoinByFormat(kindIC, "")

	return kindIS
}

// bindParamSearchRepositories binds the parameter org
func (o *SearchRepositoriesParams) bindParamOrg(formats strfmt.Registry) []string {
	orgIR := o.Org

	var orgIC []string
	for _, orgIIR := range orgIR { // explode []string

		orgIIV := orgIIR // string as string
		orgIC = append(orgIC, orgIIV)
	}

	// items.CollectionFormat: ""
	orgIS := swag.JoinByFormat(orgIC, "")

	return orgIS
}

// bindParamSearchRepositories binds the parameter user
func (o *SearchRepositoriesParams) bindParamUser(formats strfmt.Registry) []string {
	userIR := o.User

	var userIC []string
	for _, userIIR := range userIR { // explode []string

		userIIV := userIIR // string as string
		userIC = append(userIC, userIIV)
	}

	// items.CollectionFormat: ""
	userIS := swag.JoinByFormat(userIC, "")

	return userIS
}
