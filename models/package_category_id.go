// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PackageCategoryID PackageCategoryId
//
// Package category:
//   - `1` - AI / Machine learning
//   - `2` - Database
//   - `3` - Integration and delivery
//   - `4` - Monitoring and logging
//   - `5` - Networking
//   - `6` - Security
//   - `7` - Storage
//   - `8` - Streaming and messaging
//
// swagger:model PackageCategoryId
type PackageCategoryID int32

// for schema
var packageCategoryIdEnum []interface{}

func init() {
	var res []PackageCategoryID
	if err := json.Unmarshal([]byte(`["1","2","3","4","5","6","7","8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packageCategoryIdEnum = append(packageCategoryIdEnum, v)
	}
}

func (m PackageCategoryID) validatePackageCategoryIDEnum(path, location string, value PackageCategoryID) error {
	if err := validate.EnumCase(path, location, value, packageCategoryIdEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this package category Id
func (m PackageCategoryID) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePackageCategoryIDEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this package category Id based on context it is used
func (m PackageCategoryID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
