// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookSummaryWithPackages WebhookSummaryWithPackages
//
// swagger:model WebhookSummaryWithPackages
type WebhookSummaryWithPackages struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// content type
	// Example: application/json
	ContentType string `json:"content_type,omitempty"`

	// description
	// Example: description
	Description string `json:"description,omitempty"`

	// event kinds
	// Required: true
	EventKinds []EventKindID `json:"event_kinds"`

	// name
	// Example: webhook1
	// Required: true
	Name *string `json:"name"`

	// packages
	// Required: true
	Packages []*Package1 `json:"packages"`

	// secret
	// Example: 123abc
	Secret string `json:"secret,omitempty"`

	// template
	// Example: {"text":"Package {{ .Package.Name }} version {{ .Package.Version }} released! {{ .Package.URL }}"}
	Template string `json:"template,omitempty"`

	// url
	// Example: http://url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this webhook summary with packages
func (m *WebhookSummaryWithPackages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventKinds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookSummaryWithPackages) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *WebhookSummaryWithPackages) validateEventKinds(formats strfmt.Registry) error {

	if err := validate.Required("event_kinds", "body", m.EventKinds); err != nil {
		return err
	}

	for i := 0; i < len(m.EventKinds); i++ {

		if err := m.EventKinds[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_kinds" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event_kinds" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *WebhookSummaryWithPackages) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *WebhookSummaryWithPackages) validatePackages(formats strfmt.Registry) error {

	if err := validate.Required("packages", "body", m.Packages); err != nil {
		return err
	}

	for i := 0; i < len(m.Packages); i++ {
		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {
			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebhookSummaryWithPackages) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this webhook summary with packages based on the context it is used
func (m *WebhookSummaryWithPackages) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventKinds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookSummaryWithPackages) contextValidateEventKinds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventKinds); i++ {

		if err := m.EventKinds[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_kinds" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event_kinds" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *WebhookSummaryWithPackages) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packages); i++ {

		if m.Packages[i] != nil {
			if err := m.Packages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookSummaryWithPackages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookSummaryWithPackages) UnmarshalBinary(b []byte) error {
	var res WebhookSummaryWithPackages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
