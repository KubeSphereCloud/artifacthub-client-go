// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddOrganizationRepository(params *AddOrganizationRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOrganizationRepositoryCreated, error)

	AddUserRepository(params *AddUserRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserRepositoryCreated, error)

	ClaimRepositoryOwnership(params *ClaimRepositoryOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimRepositoryOwnershipNoContent, error)

	ClaimRepositoryOwnershipFromOrganization(params *ClaimRepositoryOwnershipFromOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimRepositoryOwnershipFromOrganizationNoContent, error)

	DeleteOrganizationRepository(params *DeleteOrganizationRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationRepositoryNoContent, error)

	DeleteUserRepository(params *DeleteUserRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserRepositoryNoContent, error)

	SearchRepositories(params *SearchRepositoriesParams, opts ...ClientOption) (*SearchRepositoriesOK, error)

	TransferRepositoryOwnership(params *TransferRepositoryOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferRepositoryOwnershipNoContent, error)

	TransferRepositoryOwnershipToOrganization(params *TransferRepositoryOwnershipToOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferRepositoryOwnershipToOrganizationNoContent, error)

	UpdateOrganizationRepository(params *UpdateOrganizationRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationRepositoryNoContent, error)

	UpdateUserRepository(params *UpdateUserRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserRepositoryNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddOrganizationRepository adds organization repository

Add organization's repository
*/
func (a *Client) AddOrganizationRepository(params *AddOrganizationRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOrganizationRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrganizationRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOrganizationRepository",
		Method:             "POST",
		PathPattern:        "/repositories/org/{orgName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOrganizationRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrganizationRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOrganizationRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUserRepository adds user repository

Add user's repository
*/
func (a *Client) AddUserRepository(params *AddUserRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserRepository",
		Method:             "POST",
		PathPattern:        "/repositories/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClaimRepositoryOwnership claims repository ownership

Claim the ownership of a given repository
*/
func (a *Client) ClaimRepositoryOwnership(params *ClaimRepositoryOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimRepositoryOwnershipNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimRepositoryOwnershipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "claimRepositoryOwnership",
		Method:             "PUT",
		PathPattern:        "/repositories/user/{repoName}/claim-ownership",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimRepositoryOwnershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClaimRepositoryOwnershipNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for claimRepositoryOwnership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ClaimRepositoryOwnershipFromOrganization claims repository ownership from organization

Claim the ownership of a given repository
*/
func (a *Client) ClaimRepositoryOwnershipFromOrganization(params *ClaimRepositoryOwnershipFromOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimRepositoryOwnershipFromOrganizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimRepositoryOwnershipFromOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "claimRepositoryOwnershipFromOrganization",
		Method:             "PUT",
		PathPattern:        "/repositories/org/{orgName}/{repoName}/claim-ownership",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimRepositoryOwnershipFromOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClaimRepositoryOwnershipFromOrganizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for claimRepositoryOwnershipFromOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOrganizationRepository deletes organization repository

Delete organization's repository
*/
func (a *Client) DeleteOrganizationRepository(params *DeleteOrganizationRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationRepository",
		Method:             "DELETE",
		PathPattern:        "/repositories/org/{orgName}/{repoName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserRepository deletes user repository

Delete user's repository
*/
func (a *Client) DeleteUserRepository(params *DeleteUserRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserRepository",
		Method:             "DELETE",
		PathPattern:        "/repositories/user/{repoName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRepositories searches repositories

Search repositories that meet the provided criteria
*/
func (a *Client) SearchRepositories(params *SearchRepositoriesParams, opts ...ClientOption) (*SearchRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRepositories",
		Method:             "GET",
		PathPattern:        "/repositories/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransferRepositoryOwnership transfers repository ownership

Transfer organization's repository to a different owner
*/
func (a *Client) TransferRepositoryOwnership(params *TransferRepositoryOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferRepositoryOwnershipNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferRepositoryOwnershipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferRepositoryOwnership",
		Method:             "PUT",
		PathPattern:        "/repositories/org/{orgName}/{repoName}/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferRepositoryOwnershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferRepositoryOwnershipNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferRepositoryOwnership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransferRepositoryOwnershipToOrganization transfers repository ownership to organization

Transfer user's repository ownership to an organization
*/
func (a *Client) TransferRepositoryOwnershipToOrganization(params *TransferRepositoryOwnershipToOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferRepositoryOwnershipToOrganizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferRepositoryOwnershipToOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferRepositoryOwnershipToOrganization",
		Method:             "PUT",
		PathPattern:        "/repositories/user/{repoName}/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TransferRepositoryOwnershipToOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferRepositoryOwnershipToOrganizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferRepositoryOwnershipToOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationRepository updates organization repository

Update organization's repository
*/
func (a *Client) UpdateOrganizationRepository(params *UpdateOrganizationRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationRepository",
		Method:             "PUT",
		PathPattern:        "/repositories/org/{orgName}/{repoName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserRepository updates user repository

Update user's repository
*/
func (a *Client) UpdateUserRepository(params *UpdateUserRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserRepository",
		Method:             "PUT",
		PathPattern:        "/repositories/user/{repoName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
