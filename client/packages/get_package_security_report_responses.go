// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetPackageSecurityReportReader is a Reader for the GetPackageSecurityReport structure.
type GetPackageSecurityReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPackageSecurityReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPackageSecurityReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetPackageSecurityReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPackageSecurityReportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPackageSecurityReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPackageSecurityReportOK creates a GetPackageSecurityReportOK with default headers values
func NewGetPackageSecurityReportOK() *GetPackageSecurityReportOK {
	return &GetPackageSecurityReportOK{}
}

/*
GetPackageSecurityReportOK describes a response with status code 200, with default header values.

GetPackageSecurityReportOK get package security report o k
*/
type GetPackageSecurityReportOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get package security report o k response has a 2xx status code
func (o *GetPackageSecurityReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get package security report o k response has a 3xx status code
func (o *GetPackageSecurityReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package security report o k response has a 4xx status code
func (o *GetPackageSecurityReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get package security report o k response has a 5xx status code
func (o *GetPackageSecurityReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get package security report o k response a status code equal to that given
func (o *GetPackageSecurityReportOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPackageSecurityReportOK) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportOK  %+v", 200, o.Payload)
}

func (o *GetPackageSecurityReportOK) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportOK  %+v", 200, o.Payload)
}

func (o *GetPackageSecurityReportOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetPackageSecurityReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackageSecurityReportNotFound creates a GetPackageSecurityReportNotFound with default headers values
func NewGetPackageSecurityReportNotFound() *GetPackageSecurityReportNotFound {
	return &GetPackageSecurityReportNotFound{}
}

/*
GetPackageSecurityReportNotFound describes a response with status code 404, with default header values.

The requested resource was not found
*/
type GetPackageSecurityReportNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get package security report not found response has a 2xx status code
func (o *GetPackageSecurityReportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package security report not found response has a 3xx status code
func (o *GetPackageSecurityReportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package security report not found response has a 4xx status code
func (o *GetPackageSecurityReportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package security report not found response has a 5xx status code
func (o *GetPackageSecurityReportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get package security report not found response a status code equal to that given
func (o *GetPackageSecurityReportNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPackageSecurityReportNotFound) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportNotFound  %+v", 404, o.Payload)
}

func (o *GetPackageSecurityReportNotFound) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportNotFound  %+v", 404, o.Payload)
}

func (o *GetPackageSecurityReportNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPackageSecurityReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackageSecurityReportTooManyRequests creates a GetPackageSecurityReportTooManyRequests with default headers values
func NewGetPackageSecurityReportTooManyRequests() *GetPackageSecurityReportTooManyRequests {
	return &GetPackageSecurityReportTooManyRequests{}
}

/*
GetPackageSecurityReportTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetPackageSecurityReportTooManyRequests struct {
}

// IsSuccess returns true when this get package security report too many requests response has a 2xx status code
func (o *GetPackageSecurityReportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package security report too many requests response has a 3xx status code
func (o *GetPackageSecurityReportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package security report too many requests response has a 4xx status code
func (o *GetPackageSecurityReportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package security report too many requests response has a 5xx status code
func (o *GetPackageSecurityReportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get package security report too many requests response a status code equal to that given
func (o *GetPackageSecurityReportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetPackageSecurityReportTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportTooManyRequests ", 429)
}

func (o *GetPackageSecurityReportTooManyRequests) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportTooManyRequests ", 429)
}

func (o *GetPackageSecurityReportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPackageSecurityReportInternalServerError creates a GetPackageSecurityReportInternalServerError with default headers values
func NewGetPackageSecurityReportInternalServerError() *GetPackageSecurityReportInternalServerError {
	return &GetPackageSecurityReportInternalServerError{}
}

/*
GetPackageSecurityReportInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetPackageSecurityReportInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get package security report internal server error response has a 2xx status code
func (o *GetPackageSecurityReportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package security report internal server error response has a 3xx status code
func (o *GetPackageSecurityReportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package security report internal server error response has a 4xx status code
func (o *GetPackageSecurityReportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get package security report internal server error response has a 5xx status code
func (o *GetPackageSecurityReportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get package security report internal server error response a status code equal to that given
func (o *GetPackageSecurityReportInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPackageSecurityReportInternalServerError) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPackageSecurityReportInternalServerError) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/{version}/security-report][%d] getPackageSecurityReportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPackageSecurityReportInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPackageSecurityReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
