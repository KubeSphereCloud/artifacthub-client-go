// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// ClaimRepositoryOwnershipFromOrganizationReader is a Reader for the ClaimRepositoryOwnershipFromOrganization structure.
type ClaimRepositoryOwnershipFromOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClaimRepositoryOwnershipFromOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewClaimRepositoryOwnershipFromOrganizationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewClaimRepositoryOwnershipFromOrganizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewClaimRepositoryOwnershipFromOrganizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewClaimRepositoryOwnershipFromOrganizationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewClaimRepositoryOwnershipFromOrganizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewClaimRepositoryOwnershipFromOrganizationNoContent creates a ClaimRepositoryOwnershipFromOrganizationNoContent with default headers values
func NewClaimRepositoryOwnershipFromOrganizationNoContent() *ClaimRepositoryOwnershipFromOrganizationNoContent {
	return &ClaimRepositoryOwnershipFromOrganizationNoContent{}
}

/*
ClaimRepositoryOwnershipFromOrganizationNoContent describes a response with status code 204, with default header values.

The request has succeeded, no content returned
*/
type ClaimRepositoryOwnershipFromOrganizationNoContent struct {
}

// IsSuccess returns true when this claim repository ownership from organization no content response has a 2xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this claim repository ownership from organization no content response has a 3xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this claim repository ownership from organization no content response has a 4xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this claim repository ownership from organization no content response has a 5xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this claim repository ownership from organization no content response a status code equal to that given
func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) Error() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationNoContent ", 204)
}

func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) String() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationNoContent ", 204)
}

func (o *ClaimRepositoryOwnershipFromOrganizationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClaimRepositoryOwnershipFromOrganizationUnauthorized creates a ClaimRepositoryOwnershipFromOrganizationUnauthorized with default headers values
func NewClaimRepositoryOwnershipFromOrganizationUnauthorized() *ClaimRepositoryOwnershipFromOrganizationUnauthorized {
	return &ClaimRepositoryOwnershipFromOrganizationUnauthorized{}
}

/*
ClaimRepositoryOwnershipFromOrganizationUnauthorized describes a response with status code 401, with default header values.

Valid authentication credentials not provided
*/
type ClaimRepositoryOwnershipFromOrganizationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this claim repository ownership from organization unauthorized response has a 2xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this claim repository ownership from organization unauthorized response has a 3xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this claim repository ownership from organization unauthorized response has a 4xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this claim repository ownership from organization unauthorized response has a 5xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this claim repository ownership from organization unauthorized response a status code equal to that given
func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ClaimRepositoryOwnershipFromOrganizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClaimRepositoryOwnershipFromOrganizationForbidden creates a ClaimRepositoryOwnershipFromOrganizationForbidden with default headers values
func NewClaimRepositoryOwnershipFromOrganizationForbidden() *ClaimRepositoryOwnershipFromOrganizationForbidden {
	return &ClaimRepositoryOwnershipFromOrganizationForbidden{}
}

/*
ClaimRepositoryOwnershipFromOrganizationForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the requested operation
*/
type ClaimRepositoryOwnershipFromOrganizationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this claim repository ownership from organization forbidden response has a 2xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this claim repository ownership from organization forbidden response has a 3xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this claim repository ownership from organization forbidden response has a 4xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this claim repository ownership from organization forbidden response has a 5xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this claim repository ownership from organization forbidden response a status code equal to that given
func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) String() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ClaimRepositoryOwnershipFromOrganizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClaimRepositoryOwnershipFromOrganizationTooManyRequests creates a ClaimRepositoryOwnershipFromOrganizationTooManyRequests with default headers values
func NewClaimRepositoryOwnershipFromOrganizationTooManyRequests() *ClaimRepositoryOwnershipFromOrganizationTooManyRequests {
	return &ClaimRepositoryOwnershipFromOrganizationTooManyRequests{}
}

/*
ClaimRepositoryOwnershipFromOrganizationTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type ClaimRepositoryOwnershipFromOrganizationTooManyRequests struct {
}

// IsSuccess returns true when this claim repository ownership from organization too many requests response has a 2xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this claim repository ownership from organization too many requests response has a 3xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this claim repository ownership from organization too many requests response has a 4xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this claim repository ownership from organization too many requests response has a 5xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this claim repository ownership from organization too many requests response a status code equal to that given
func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationTooManyRequests ", 429)
}

func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationTooManyRequests ", 429)
}

func (o *ClaimRepositoryOwnershipFromOrganizationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClaimRepositoryOwnershipFromOrganizationInternalServerError creates a ClaimRepositoryOwnershipFromOrganizationInternalServerError with default headers values
func NewClaimRepositoryOwnershipFromOrganizationInternalServerError() *ClaimRepositoryOwnershipFromOrganizationInternalServerError {
	return &ClaimRepositoryOwnershipFromOrganizationInternalServerError{}
}

/*
ClaimRepositoryOwnershipFromOrganizationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type ClaimRepositoryOwnershipFromOrganizationInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this claim repository ownership from organization internal server error response has a 2xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this claim repository ownership from organization internal server error response has a 3xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this claim repository ownership from organization internal server error response has a 4xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this claim repository ownership from organization internal server error response has a 5xx status code
func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this claim repository ownership from organization internal server error response a status code equal to that given
func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /repositories/org/{orgName}/{repoName}/claim-ownership][%d] claimRepositoryOwnershipFromOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ClaimRepositoryOwnershipFromOrganizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
