// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetProductionUsageReader is a Reader for the GetProductionUsage structure.
type GetProductionUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProductionUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProductionUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetProductionUsageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetProductionUsageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProductionUsageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProductionUsageOK creates a GetProductionUsageOK with default headers values
func NewGetProductionUsageOK() *GetProductionUsageOK {
	return &GetProductionUsageOK{}
}

/*
GetProductionUsageOK describes a response with status code 200, with default header values.

GetProductionUsageOK get production usage o k
*/
type GetProductionUsageOK struct {
	Payload []*models.ProductionUsageOrganization
}

// IsSuccess returns true when this get production usage o k response has a 2xx status code
func (o *GetProductionUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get production usage o k response has a 3xx status code
func (o *GetProductionUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get production usage o k response has a 4xx status code
func (o *GetProductionUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get production usage o k response has a 5xx status code
func (o *GetProductionUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get production usage o k response a status code equal to that given
func (o *GetProductionUsageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetProductionUsageOK) Error() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageOK  %+v", 200, o.Payload)
}

func (o *GetProductionUsageOK) String() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageOK  %+v", 200, o.Payload)
}

func (o *GetProductionUsageOK) GetPayload() []*models.ProductionUsageOrganization {
	return o.Payload
}

func (o *GetProductionUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductionUsageNotFound creates a GetProductionUsageNotFound with default headers values
func NewGetProductionUsageNotFound() *GetProductionUsageNotFound {
	return &GetProductionUsageNotFound{}
}

/*
GetProductionUsageNotFound describes a response with status code 404, with default header values.

The requested resource was not found
*/
type GetProductionUsageNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get production usage not found response has a 2xx status code
func (o *GetProductionUsageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get production usage not found response has a 3xx status code
func (o *GetProductionUsageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get production usage not found response has a 4xx status code
func (o *GetProductionUsageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get production usage not found response has a 5xx status code
func (o *GetProductionUsageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get production usage not found response a status code equal to that given
func (o *GetProductionUsageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetProductionUsageNotFound) Error() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageNotFound  %+v", 404, o.Payload)
}

func (o *GetProductionUsageNotFound) String() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageNotFound  %+v", 404, o.Payload)
}

func (o *GetProductionUsageNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProductionUsageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductionUsageTooManyRequests creates a GetProductionUsageTooManyRequests with default headers values
func NewGetProductionUsageTooManyRequests() *GetProductionUsageTooManyRequests {
	return &GetProductionUsageTooManyRequests{}
}

/*
GetProductionUsageTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetProductionUsageTooManyRequests struct {
}

// IsSuccess returns true when this get production usage too many requests response has a 2xx status code
func (o *GetProductionUsageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get production usage too many requests response has a 3xx status code
func (o *GetProductionUsageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get production usage too many requests response has a 4xx status code
func (o *GetProductionUsageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get production usage too many requests response has a 5xx status code
func (o *GetProductionUsageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get production usage too many requests response a status code equal to that given
func (o *GetProductionUsageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetProductionUsageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageTooManyRequests ", 429)
}

func (o *GetProductionUsageTooManyRequests) String() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageTooManyRequests ", 429)
}

func (o *GetProductionUsageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProductionUsageInternalServerError creates a GetProductionUsageInternalServerError with default headers values
func NewGetProductionUsageInternalServerError() *GetProductionUsageInternalServerError {
	return &GetProductionUsageInternalServerError{}
}

/*
GetProductionUsageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetProductionUsageInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get production usage internal server error response has a 2xx status code
func (o *GetProductionUsageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get production usage internal server error response has a 3xx status code
func (o *GetProductionUsageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get production usage internal server error response has a 4xx status code
func (o *GetProductionUsageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get production usage internal server error response has a 5xx status code
func (o *GetProductionUsageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get production usage internal server error response a status code equal to that given
func (o *GetProductionUsageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetProductionUsageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetProductionUsageInternalServerError) String() string {
	return fmt.Sprintf("[GET /packages/{repoKindParam}/{repoName}/{packageName}/production-usage][%d] getProductionUsageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetProductionUsageInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProductionUsageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
