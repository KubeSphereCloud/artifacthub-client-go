// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddOrganizationWebhook(params *AddOrganizationWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOrganizationWebhookCreated, error)

	AddUserWebhook(params *AddUserWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserWebhookCreated, error)

	DeleteOrganizationWebhook(params *DeleteOrganizationWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationWebhookNoContent, error)

	DeleteUserWebhook(params *DeleteUserWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserWebhookNoContent, error)

	GetOrganizationWebhookDetails(params *GetOrganizationWebhookDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhookDetailsOK, error)

	GetOrganizationWebhooks(params *GetOrganizationWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhooksOK, error)

	GetUserWebhookDetail(params *GetUserWebhookDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserWebhookDetailOK, error)

	GetUserWebhooks(params *GetUserWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserWebhooksOK, error)

	TriggerWebhookTest(params *TriggerWebhookTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerWebhookTestNoContent, error)

	UpdateOrganizationWebhook(params *UpdateOrganizationWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationWebhookNoContent, error)

	UpdateUserWebhook(params *UpdateUserWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserWebhookNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddOrganizationWebhook adds organization webhook

Add organization's webhook
*/
func (a *Client) AddOrganizationWebhook(params *AddOrganizationWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOrganizationWebhookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrganizationWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOrganizationWebhook",
		Method:             "POST",
		PathPattern:        "/webhooks/org/{orgName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOrganizationWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrganizationWebhookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOrganizationWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUserWebhook adds user webhook

Add user's webhook
*/
func (a *Client) AddUserWebhook(params *AddUserWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserWebhookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserWebhook",
		Method:             "POST",
		PathPattern:        "/webhooks/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserWebhookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOrganizationWebhook deletes organization webhook

Delete organization's webhook
*/
func (a *Client) DeleteOrganizationWebhook(params *DeleteOrganizationWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationWebhookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationWebhook",
		Method:             "DELETE",
		PathPattern:        "/webhooks/org/{orgName}/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationWebhookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserWebhook deletes user webhook

Delete user's webhook
*/
func (a *Client) DeleteUserWebhook(params *DeleteUserWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserWebhookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserWebhook",
		Method:             "DELETE",
		PathPattern:        "/webhooks/user/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserWebhookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationWebhookDetails gets organization webhook details

Get organization's webhook
*/
func (a *Client) GetOrganizationWebhookDetails(params *GetOrganizationWebhookDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhookDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationWebhookDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationWebhookDetails",
		Method:             "GET",
		PathPattern:        "/webhooks/org/{orgName}/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationWebhookDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationWebhookDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationWebhookDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationWebhooks gets organization webhooks

Get organization's webhooks
*/
func (a *Client) GetOrganizationWebhooks(params *GetOrganizationWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationWebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationWebhooks",
		Method:             "GET",
		PathPattern:        "/webhooks/org/{orgName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationWebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationWebhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserWebhookDetail gets user webhook detail

Get user's webhook
*/
func (a *Client) GetUserWebhookDetail(params *GetUserWebhookDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserWebhookDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserWebhookDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserWebhookDetail",
		Method:             "GET",
		PathPattern:        "/webhooks/user/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserWebhookDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserWebhookDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserWebhookDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserWebhooks gets user webhooks

Get user's webhooks
*/
func (a *Client) GetUserWebhooks(params *GetUserWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserWebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserWebhooks",
		Method:             "GET",
		PathPattern:        "/webhooks/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserWebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserWebhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerWebhookTest triggers webhook test

Trigger webhook test
*/
func (a *Client) TriggerWebhookTest(params *TriggerWebhookTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerWebhookTestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerWebhookTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerWebhookTest",
		Method:             "POST",
		PathPattern:        "/webhooks/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriggerWebhookTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerWebhookTestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerWebhookTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationWebhook updates organization webhook

Update organization's webhook
*/
func (a *Client) UpdateOrganizationWebhook(params *UpdateOrganizationWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationWebhookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationWebhook",
		Method:             "PUT",
		PathPattern:        "/webhooks/org/{orgName}/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationWebhookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserWebhook updates user webhook

Update user's webhook
*/
func (a *Client) UpdateUserWebhook(params *UpdateUserWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserWebhookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserWebhook",
		Method:             "PUT",
		PathPattern:        "/webhooks/user/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserWebhookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
