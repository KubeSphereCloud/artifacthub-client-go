// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetAllowedActionsReader is a Reader for the GetAllowedActions structure.
type GetAllowedActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllowedActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllowedActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllowedActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllowedActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAllowedActionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllowedActionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllowedActionsOK creates a GetAllowedActionsOK with default headers values
func NewGetAllowedActionsOK() *GetAllowedActionsOK {
	return &GetAllowedActionsOK{}
}

/*
GetAllowedActionsOK describes a response with status code 200, with default header values.

GetAllowedActionsOK get allowed actions o k
*/
type GetAllowedActionsOK struct {
	Payload []models.AuthorizerAction
}

// IsSuccess returns true when this get allowed actions o k response has a 2xx status code
func (o *GetAllowedActionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get allowed actions o k response has a 3xx status code
func (o *GetAllowedActionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get allowed actions o k response has a 4xx status code
func (o *GetAllowedActionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get allowed actions o k response has a 5xx status code
func (o *GetAllowedActionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get allowed actions o k response a status code equal to that given
func (o *GetAllowedActionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAllowedActionsOK) Error() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsOK  %+v", 200, o.Payload)
}

func (o *GetAllowedActionsOK) String() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsOK  %+v", 200, o.Payload)
}

func (o *GetAllowedActionsOK) GetPayload() []models.AuthorizerAction {
	return o.Payload
}

func (o *GetAllowedActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllowedActionsUnauthorized creates a GetAllowedActionsUnauthorized with default headers values
func NewGetAllowedActionsUnauthorized() *GetAllowedActionsUnauthorized {
	return &GetAllowedActionsUnauthorized{}
}

/*
GetAllowedActionsUnauthorized describes a response with status code 401, with default header values.

Valid authentication credentials not provided
*/
type GetAllowedActionsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get allowed actions unauthorized response has a 2xx status code
func (o *GetAllowedActionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get allowed actions unauthorized response has a 3xx status code
func (o *GetAllowedActionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get allowed actions unauthorized response has a 4xx status code
func (o *GetAllowedActionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get allowed actions unauthorized response has a 5xx status code
func (o *GetAllowedActionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get allowed actions unauthorized response a status code equal to that given
func (o *GetAllowedActionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAllowedActionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAllowedActionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAllowedActionsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllowedActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllowedActionsForbidden creates a GetAllowedActionsForbidden with default headers values
func NewGetAllowedActionsForbidden() *GetAllowedActionsForbidden {
	return &GetAllowedActionsForbidden{}
}

/*
GetAllowedActionsForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the requested operation
*/
type GetAllowedActionsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get allowed actions forbidden response has a 2xx status code
func (o *GetAllowedActionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get allowed actions forbidden response has a 3xx status code
func (o *GetAllowedActionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get allowed actions forbidden response has a 4xx status code
func (o *GetAllowedActionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get allowed actions forbidden response has a 5xx status code
func (o *GetAllowedActionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get allowed actions forbidden response a status code equal to that given
func (o *GetAllowedActionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAllowedActionsForbidden) Error() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsForbidden  %+v", 403, o.Payload)
}

func (o *GetAllowedActionsForbidden) String() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsForbidden  %+v", 403, o.Payload)
}

func (o *GetAllowedActionsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllowedActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllowedActionsTooManyRequests creates a GetAllowedActionsTooManyRequests with default headers values
func NewGetAllowedActionsTooManyRequests() *GetAllowedActionsTooManyRequests {
	return &GetAllowedActionsTooManyRequests{}
}

/*
GetAllowedActionsTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetAllowedActionsTooManyRequests struct {
}

// IsSuccess returns true when this get allowed actions too many requests response has a 2xx status code
func (o *GetAllowedActionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get allowed actions too many requests response has a 3xx status code
func (o *GetAllowedActionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get allowed actions too many requests response has a 4xx status code
func (o *GetAllowedActionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get allowed actions too many requests response has a 5xx status code
func (o *GetAllowedActionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get allowed actions too many requests response a status code equal to that given
func (o *GetAllowedActionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAllowedActionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsTooManyRequests ", 429)
}

func (o *GetAllowedActionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsTooManyRequests ", 429)
}

func (o *GetAllowedActionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllowedActionsInternalServerError creates a GetAllowedActionsInternalServerError with default headers values
func NewGetAllowedActionsInternalServerError() *GetAllowedActionsInternalServerError {
	return &GetAllowedActionsInternalServerError{}
}

/*
GetAllowedActionsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetAllowedActionsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get allowed actions internal server error response has a 2xx status code
func (o *GetAllowedActionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get allowed actions internal server error response has a 3xx status code
func (o *GetAllowedActionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get allowed actions internal server error response has a 4xx status code
func (o *GetAllowedActionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get allowed actions internal server error response has a 5xx status code
func (o *GetAllowedActionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get allowed actions internal server error response a status code equal to that given
func (o *GetAllowedActionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAllowedActionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAllowedActionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /orgs/{orgName}/user-allowed-actions][%d] getAllowedActionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAllowedActionsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllowedActionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
