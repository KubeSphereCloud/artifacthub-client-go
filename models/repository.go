// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Repository Repository
//
// swagger:model Repository
type Repository struct {

	// branch
	Branch string `json:"branch,omitempty"`

	// cncf
	Cncf bool `json:"cncf,omitempty"`

	// data
	Data *Data12 `json:"data,omitempty"`

	// digest
	// Required: true
	Digest *string `json:"digest"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// display name
	// Example: Repository 1
	DisplayName string `json:"display_name,omitempty"`

	// kind
	// Required: true
	Kind *RepositoryKind `json:"kind"`

	// last scanning errors
	// Example: Error
	LastScanningErrors string `json:"last_scanning_errors,omitempty"`

	// last scanning ts
	// Required: true
	LastScanningTs *int32 `json:"last_scanning_ts"`

	// last tracking errors
	// Example: Error
	LastTrackingErrors string `json:"last_tracking_errors,omitempty"`

	// last tracking ts
	// Required: true
	LastTrackingTs *int32 `json:"last_tracking_ts"`

	// name
	// Example: repo1
	// Required: true
	Name *string `json:"name"`

	// official
	// Required: true
	Official *bool `json:"official"`

	// organization display name
	// Example: Organization 1
	OrganizationDisplayName string `json:"organization_display_name,omitempty"`

	// organization name
	// Example: org1
	OrganizationName string `json:"organization_name,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// repository id
	// Required: true
	// Format: uuid
	RepositoryID *strfmt.UUID `json:"repository_id"`

	// scanner disabled
	// Example: false
	// Required: true
	ScannerDisabled *bool `json:"scanner_disabled"`

	// url
	// Example: http://repourl
	// Required: true
	URL *string `json:"url"`

	// user alias
	// Example: jdoe
	UserAlias string `json:"user_alias,omitempty"`

	// verified publisher
	// Required: true
	VerifiedPublisher *bool `json:"verified_publisher"`
}

// Validate validates this repository
func (m *Repository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastScanningTs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastTrackingTs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScannerDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerifiedPublisher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repository) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateDigest(formats strfmt.Registry) error {

	if err := validate.Required("digest", "body", m.Digest); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	if m.Kind != nil {
		if err := m.Kind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kind")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateLastScanningTs(formats strfmt.Registry) error {

	if err := validate.Required("last_scanning_ts", "body", m.LastScanningTs); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateLastTrackingTs(formats strfmt.Registry) error {

	if err := validate.Required("last_tracking_ts", "body", m.LastTrackingTs); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateOfficial(formats strfmt.Registry) error {

	if err := validate.Required("official", "body", m.Official); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateRepositoryID(formats strfmt.Registry) error {

	if err := validate.Required("repository_id", "body", m.RepositoryID); err != nil {
		return err
	}

	if err := validate.FormatOf("repository_id", "body", "uuid", m.RepositoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateScannerDisabled(formats strfmt.Registry) error {

	if err := validate.Required("scanner_disabled", "body", m.ScannerDisabled); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateVerifiedPublisher(formats strfmt.Registry) error {

	if err := validate.Required("verified_publisher", "body", m.VerifiedPublisher); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this repository based on the context it is used
func (m *Repository) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repository) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if m.Kind != nil {
		if err := m.Kind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kind")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Repository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Repository) UnmarshalBinary(b []byte) error {
	var res Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
