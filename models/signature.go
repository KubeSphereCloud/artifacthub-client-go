// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Signature Signature
//
// swagger:model Signature
type Signature string

func NewSignature(value Signature) *Signature {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Signature.
func (m Signature) Pointer() *Signature {
	return &m
}

const (

	// SignatureProv captures enum value "prov"
	SignatureProv Signature = "prov"

	// SignatureCosign captures enum value "cosign"
	SignatureCosign Signature = "cosign"
)

// for schema
var signatureEnum []interface{}

func init() {
	var res []Signature
	if err := json.Unmarshal([]byte(`["prov","cosign"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signatureEnum = append(signatureEnum, v)
	}
}

func (m Signature) validateSignatureEnum(path, location string, value Signature) error {
	if err := validate.EnumCase(path, location, value, signatureEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this signature
func (m Signature) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSignatureEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this signature based on context it is used
func (m Signature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
