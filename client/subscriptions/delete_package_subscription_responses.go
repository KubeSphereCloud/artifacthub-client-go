// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// DeletePackageSubscriptionReader is a Reader for the DeletePackageSubscription structure.
type DeletePackageSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePackageSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeletePackageSubscriptionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeletePackageSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeletePackageSubscriptionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeletePackageSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeletePackageSubscriptionNoContent creates a DeletePackageSubscriptionNoContent with default headers values
func NewDeletePackageSubscriptionNoContent() *DeletePackageSubscriptionNoContent {
	return &DeletePackageSubscriptionNoContent{}
}

/*
DeletePackageSubscriptionNoContent describes a response with status code 204, with default header values.

The request has succeeded, no content returned
*/
type DeletePackageSubscriptionNoContent struct {
}

// IsSuccess returns true when this delete package subscription no content response has a 2xx status code
func (o *DeletePackageSubscriptionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete package subscription no content response has a 3xx status code
func (o *DeletePackageSubscriptionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package subscription no content response has a 4xx status code
func (o *DeletePackageSubscriptionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete package subscription no content response has a 5xx status code
func (o *DeletePackageSubscriptionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete package subscription no content response a status code equal to that given
func (o *DeletePackageSubscriptionNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeletePackageSubscriptionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionNoContent ", 204)
}

func (o *DeletePackageSubscriptionNoContent) String() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionNoContent ", 204)
}

func (o *DeletePackageSubscriptionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePackageSubscriptionBadRequest creates a DeletePackageSubscriptionBadRequest with default headers values
func NewDeletePackageSubscriptionBadRequest() *DeletePackageSubscriptionBadRequest {
	return &DeletePackageSubscriptionBadRequest{}
}

/*
DeletePackageSubscriptionBadRequest describes a response with status code 400, with default header values.

The request sent was not valid
*/
type DeletePackageSubscriptionBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete package subscription bad request response has a 2xx status code
func (o *DeletePackageSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete package subscription bad request response has a 3xx status code
func (o *DeletePackageSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package subscription bad request response has a 4xx status code
func (o *DeletePackageSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete package subscription bad request response has a 5xx status code
func (o *DeletePackageSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete package subscription bad request response a status code equal to that given
func (o *DeletePackageSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeletePackageSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePackageSubscriptionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePackageSubscriptionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeletePackageSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackageSubscriptionTooManyRequests creates a DeletePackageSubscriptionTooManyRequests with default headers values
func NewDeletePackageSubscriptionTooManyRequests() *DeletePackageSubscriptionTooManyRequests {
	return &DeletePackageSubscriptionTooManyRequests{}
}

/*
DeletePackageSubscriptionTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type DeletePackageSubscriptionTooManyRequests struct {
}

// IsSuccess returns true when this delete package subscription too many requests response has a 2xx status code
func (o *DeletePackageSubscriptionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete package subscription too many requests response has a 3xx status code
func (o *DeletePackageSubscriptionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package subscription too many requests response has a 4xx status code
func (o *DeletePackageSubscriptionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete package subscription too many requests response has a 5xx status code
func (o *DeletePackageSubscriptionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete package subscription too many requests response a status code equal to that given
func (o *DeletePackageSubscriptionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeletePackageSubscriptionTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionTooManyRequests ", 429)
}

func (o *DeletePackageSubscriptionTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionTooManyRequests ", 429)
}

func (o *DeletePackageSubscriptionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePackageSubscriptionInternalServerError creates a DeletePackageSubscriptionInternalServerError with default headers values
func NewDeletePackageSubscriptionInternalServerError() *DeletePackageSubscriptionInternalServerError {
	return &DeletePackageSubscriptionInternalServerError{}
}

/*
DeletePackageSubscriptionInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type DeletePackageSubscriptionInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete package subscription internal server error response has a 2xx status code
func (o *DeletePackageSubscriptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete package subscription internal server error response has a 3xx status code
func (o *DeletePackageSubscriptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package subscription internal server error response has a 4xx status code
func (o *DeletePackageSubscriptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete package subscription internal server error response has a 5xx status code
func (o *DeletePackageSubscriptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete package subscription internal server error response a status code equal to that given
func (o *DeletePackageSubscriptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeletePackageSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePackageSubscriptionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /subscriptions][%d] deletePackageSubscriptionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePackageSubscriptionInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeletePackageSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
