{
  "swagger": "2.0",
  "info": {
    "version": "1.13.0",
    "title": "Artifact Hub",
    "description": "Find, install and publish Kubernetes packages",
    "contact": {
      "name": "Artifact Hub support",
      "url": "https://cloud-native.slack.com/channels/artifact-hub"
    }
  },
  "host": "raw.githubusercontent.com",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "ApiKeyId": {
      "type": "apiKey",
      "name": "X-API-KEY-ID",
      "in": "header"
    },
    "ApiKeySecret": {
      "type": "apiKey",
      "name": "X-API-KEY-SECRET",
      "in": "header"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "post": {
        "description": "Register a new user",
        "summary": "registerUser",
        "tags": [
          "Users"
        ],
        "operationId": "registerUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UsersRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/users/verify-email": {
      "post": {
        "description": "Verify user's email address",
        "summary": "verifyEmail",
        "tags": [
          "Users"
        ],
        "operationId": "verifyEmail",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UsersVerifyEmailRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "410": {
            "description": "The code provided has expired",
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "description": "Get user's profile",
        "summary": "getUserProfile",
        "tags": [
          "Users"
        ],
        "operationId": "getUserProfile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "put": {
        "description": "Update user's profile",
        "summary": "updateUserProfile",
        "tags": [
          "Users"
        ],
        "operationId": "updateUserProfile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/users/password": {
      "put": {
        "description": "Update user's password",
        "summary": "updateUserPassword",
        "tags": [
          "Users"
        ],
        "operationId": "updateUserPassword",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UsersPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/users/password-reset-code": {
      "post": {
        "description": "Register a code to reset the password",
        "summary": "resetPasswordCode",
        "tags": [
          "Users"
        ],
        "operationId": "resetPasswordCode",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UsersPasswordResetCodeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/users/verify-password-reset-code": {
      "post": {
        "description": "Verify a reset password code",
        "summary": "verifyPasswordCode",
        "tags": [
          "Users"
        ],
        "operationId": "verifyPasswordCode",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UsersVerifyPasswordResetCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "410": {
            "description": "The code provided has expired",
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/users/reset-password": {
      "put": {
        "description": "Reset the user's password",
        "summary": "resetPassword",
        "tags": [
          "Users"
        ],
        "operationId": "resetPassword",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UsersResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/orgs": {
      "post": {
        "description": "Register new organization",
        "summary": "addOrganization",
        "tags": [
          "Organizations"
        ],
        "operationId": "addOrganization",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationSummary"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/user": {
      "get": {
        "description": "Get organizations the user belongs to",
        "summary": "getUserOrganizations",
        "tags": [
          "Organizations"
        ],
        "operationId": "getUserOrganizations",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "integer",
            "format": "int32",
            "maximum": 60.0,
            "exclusiveMaximum": false,
            "description": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of organizations",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/{orgName}": {
      "get": {
        "description": "Get organization profile",
        "summary": "getOrganizationProfile",
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationProfile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationSummary"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Updates organization profile",
        "summary": "updateOrganizationProfile",
        "tags": [
          "Organizations"
        ],
        "operationId": "updateOrganizationProfile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationSummary"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete organization",
        "summary": "deleteOrganization",
        "tags": [
          "Organizations"
        ],
        "operationId": "deleteOrganization",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/{orgName}/authorization-policy": {
      "get": {
        "description": "Get organization's authorization policy",
        "summary": "getOrganizationAuthPolicy",
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationAuthPolicy",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthorizationPolicy"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "put": {
        "description": "Update organization's authorization policy",
        "summary": "updateOrganizationAuthPolicy",
        "tags": [
          "Organizations"
        ],
        "operationId": "updateOrganizationAuthPolicy",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthorizationPolicy"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/{orgName}/members": {
      "get": {
        "description": "Get organization members",
        "summary": "getOrganizationMembers",
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationMembers",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/Member"
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/{orgName}/member/{userAlias}": {
      "post": {
        "description": "Add a new member to the organization",
        "summary": "addOrganizationMember",
        "tags": [
          "Organizations"
        ],
        "operationId": "addOrganizationMember",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "userAlias",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User alias"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete a member from the organization",
        "summary": "deleteOrganizationMember",
        "tags": [
          "Organizations"
        ],
        "operationId": "deleteOrganizationMember",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "userAlias",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User alias"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/{orgName}/accept-invitation": {
      "get": {
        "description": "Confirm user's membership to an organization",
        "summary": "acceptOrganizationInvitation",
        "tags": [
          "Organizations"
        ],
        "operationId": "acceptOrganizationInvitation",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/orgs/{orgName}/user-allowed-actions": {
      "get": {
        "description": "Get actions which user is allowed to perform in the provided organization",
        "summary": "getAllowedActions",
        "tags": [
          "Organizations"
        ],
        "operationId": "getAllowedActions",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/AuthorizerAction"
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/search": {
      "get": {
        "description": "Search repositories that meet the provided criteria",
        "summary": "searchRepositories",
        "tags": [
          "Repositories"
        ],
        "operationId": "searchRepositories",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "integer",
            "format": "int32",
            "maximum": 60.0,
            "exclusiveMaximum": false,
            "description": "The number of items to return"
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16"
              ]
            },
            "description": "Repository kind:\n  * `0` - Helm charts\n  * `1` - Falco rules\n  * `2` - OPA policies\n  * `3` - OLM operators\n  * `4` - Tinkerbell actions\n  * `5` - Krew kubectl plugins\n  * `6` - Helm plugins\n  * `7` - Tekton tasks\n  * `8` - KEDA scalers\n  * `9` - Core DNS plugins\n  * `10` - Keptn integrations\n  * `11` - Tekton pipelines\n  * `12` - Container images\n  * `13` - Kubewarden policies\n  * `14` - Gatekeeper policies\n  * `15` - Kyverno policies\n  * `16` - Knative client plugins\n  * `17` - Backstage plugins"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of aliases"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of organization names"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Repository url"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of repositories",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/repositories/user": {
      "post": {
        "description": "Add user's repository",
        "summary": "addUserRepository",
        "tags": [
          "Repositories"
        ],
        "operationId": "addUserRepository",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Repository request body",
            "schema": {
              "$ref": "#/definitions/RepositoryBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/user/{repoName}": {
      "put": {
        "description": "Update user's repository",
        "summary": "updateUserRepository",
        "tags": [
          "Repositories"
        ],
        "operationId": "updateUserRepository",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Repository request body",
            "schema": {
              "$ref": "#/definitions/RepositoryBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete user's repository",
        "summary": "deleteUserRepository",
        "tags": [
          "Repositories"
        ],
        "operationId": "deleteUserRepository",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/user/{repoName}/transfer": {
      "put": {
        "description": "Transfer user's repository ownership to an organization",
        "summary": "transferRepositoryOwnershipToOrganization",
        "tags": [
          "Repositories"
        ],
        "operationId": "transferRepositoryOwnershipToOrganization",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The org to transfer or from claiming the repository"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/user/{repoName}/claim-ownership": {
      "put": {
        "description": "Claim the ownership of a given repository",
        "summary": "claimRepositoryOwnership",
        "tags": [
          "Repositories"
        ],
        "operationId": "claimRepositoryOwnership",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The org to transfer or from claiming the repository"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/org/{orgName}": {
      "post": {
        "description": "Add organization's repository",
        "summary": "addOrganizationRepository",
        "tags": [
          "Repositories"
        ],
        "operationId": "addOrganizationRepository",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Repository request body",
            "schema": {
              "$ref": "#/definitions/RepositoryBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/org/{orgName}/{repoName}": {
      "put": {
        "description": "Update organization's repository",
        "summary": "updateOrganizationRepository",
        "tags": [
          "Repositories"
        ],
        "operationId": "updateOrganizationRepository",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Repository request body",
            "schema": {
              "$ref": "#/definitions/RepositoryBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete organization's repository",
        "summary": "deleteOrganizationRepository",
        "tags": [
          "Repositories"
        ],
        "operationId": "deleteOrganizationRepository",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/org/{orgName}/{repoName}/transfer": {
      "put": {
        "description": "Transfer organization's repository to a different owner",
        "summary": "transferRepositoryOwnership",
        "tags": [
          "Repositories"
        ],
        "operationId": "transferRepositoryOwnership",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The org to transfer or from claiming the repository"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/repositories/org/{orgName}/{repoName}/claim-ownership": {
      "put": {
        "description": "Claim the ownership of a given repository",
        "summary": "claimRepositoryOwnershipFromOrganization",
        "tags": [
          "Repositories"
        ],
        "operationId": "claimRepositoryOwnershipFromOrganization",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The org to transfer or from claiming the repository"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/packages/stats": {
      "get": {
        "description": "Get the number of packages and releases registered",
        "summary": "getPackageStats",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageStats",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PackagesStatsResponse"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/random": {
      "get": {
        "description": "Get some random packages",
        "summary": "getRandomPackages",
        "tags": [
          "Packages"
        ],
        "operationId": "getRandomPackages",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/PackageSummary"
              }
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/search": {
      "get": {
        "description": "Search packages that meet the provided criteria",
        "summary": "searchPackages",
        "tags": [
          "Packages"
        ],
        "operationId": "searchPackages",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "integer",
            "format": "int32",
            "maximum": 60.0,
            "exclusiveMaximum": false,
            "description": "The number of items to return"
          },
          {
            "name": "facets",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Whether we should get facets or not"
          },
          {
            "name": "ts_query_web",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Text search query (websearch format)"
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16"
              ]
            },
            "description": "Repository kind:\n  * `0` - Helm charts\n  * `1` - Falco rules\n  * `2` - OPA policies\n  * `3` - OLM operators\n  * `4` - Tinkerbell actions\n  * `5` - Krew kubectl plugins\n  * `6` - Helm plugins\n  * `7` - Tekton tasks\n  * `8` - KEDA scalers\n  * `9` - Core DNS plugins\n  * `10` - Keptn integrations\n  * `11` - Tekton pipelines\n  * `12` - Container images\n  * `13` - Kubewarden policies\n  * `14` - Gatekeeper policies\n  * `15` - Kyverno policies\n  * `16` - Knative client plugins\n  * `17` - Backstage plugins"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
              ]
            },
            "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of aliases"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of organization names"
          },
          {
            "name": "repo",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of repository names"
          },
          {
            "name": "license",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of SPDX identifiers"
          },
          {
            "name": "capabilities",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of operator capability levels"
          },
          {
            "name": "deprecated",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Whether to include deprecated packages or not"
          },
          {
            "name": "operators",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to get only operators"
          },
          {
            "name": "verified_publisher",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to get only verified publisher"
          },
          {
            "name": "official",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to get only official repositories"
          },
          {
            "name": "cncf",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Whether to get only pacakges published by CNCF projects"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "relevance",
              "stars"
            ],
            "type": "string",
            "description": "Sort criteria"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PackagesSearchResponse"
            },
            "examples": {
              "application/json": {
                "packages": [
                  {
                    "package_id": "a9c77b9a-2cd1-4a8f-b9e8-6b8f94e13407",
                    "name": "artifact-hub",
                    "normalized_name": "artifact-hub",
                    "logo_image_id": "0f5488e2-da57-486b-a20f-bfe746ed3e23",
                    "stars": 2,
                    "description": "Artifact Hub is a web-based application that enables finding, installing, and publishing Kubernetes packages.",
                    "version": "0.1.0",
                    "app_version": "0.1.0",
                    "deprecated": false,
                    "ts": 1617098261617098268,
                    "repository": {
                      "url": "http://url.com",
                      "kind": 0,
                      "name": "artifact-hub",
                      "display_name": "Artifact Hub",
                      "repository_id": "a032a436-3568-4970-804a-2780f5e9d231",
                      "organization_name": "artifacthub",
                      "organization_display_name": "Artifact Hub",
                      "verified_publisher": true,
                      "official": true,
                      "scanner_disabled": false
                    }
                  },
                  {
                    "package_id": "3af7b6a1-adbd-41f1-ad96-e1eb3350b019",
                    "name": "sentry-kubernetes",
                    "normalized_name": "sentry-kubernetes",
                    "logo_image_id": "55f2ed75-015d-4edd-9990-11fb2ffcae9e",
                    "stars": 0,
                    "category": 4,
                    "description": "A Helm chart for sentry-kubernetes",
                    "version": "0.2.3",
                    "app_version": "latest",
                    "deprecated": false,
                    "ts": 1617098268,
                    "repository": {
                      "url": "http://url.com",
                      "kind": 0,
                      "name": "incubator",
                      "display_name": "Incubator",
                      "repository_id": "dba459d0-6beb-451a-b15a-52d67cc93fa0",
                      "organization_name": "helm",
                      "organization_display_name": "Helm",
                      "verified_publisher": false,
                      "official": false,
                      "scanner_disabled": false
                    }
                  },
                  {
                    "package_id": "0d38123f-fb60-41f0-bd00-76fb331bf7ed",
                    "name": "etcd-operator",
                    "normalized_name": "etcd-operator",
                    "logo_image_id": "5gt2ed75-015d-40dd-9990-11fb2tgcae9e",
                    "stars": 0,
                    "category": 2,
                    "description": "CoreOS etcd-operator Helm chart for Kubernetes",
                    "version": "0.10.3",
                    "app_version": "0.9.4",
                    "deprecated": false,
                    "ts": 1617098268,
                    "repository": {
                      "url": "http://url.com",
                      "kind": 0,
                      "name": "stable",
                      "display_name": "Stable",
                      "repository_id": "486f6d4c-9f66-11eb-a8b3-0242ac130003",
                      "organization_name": "helm",
                      "organization_display_name": "Helm",
                      "verified_publisher": false,
                      "official": false,
                      "scanner_disabled": false
                    }
                  }
                ],
                "facets": [
                  {
                    "title": "Organization",
                    "filter_key": "org",
                    "options": [
                      {
                        "id": "helm",
                        "name": "Helm",
                        "total": 53
                      },
                      {
                        "id": "artifacthub",
                        "name": "Artifact Hub",
                        "total": 1
                      }
                    ]
                  },
                  {
                    "title": "kind",
                    "filter_key": "kind",
                    "options": [
                      {
                        "id": "0",
                        "name": "Helm charts",
                        "total": 54
                      }
                    ]
                  },
                  {
                    "title": "Repository",
                    "filter_key": "repo",
                    "options": [
                      {
                        "id": "stable",
                        "name": "Stable",
                        "total": 16
                      },
                      {
                        "id": "incubator",
                        "name": "Incubator",
                        "total": 36
                      },
                      {
                        "id": "artifact-hub",
                        "name": "Artifact Hub",
                        "total": 1
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of packages for this search",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/starred": {
      "get": {
        "description": "Get packages starred by user",
        "summary": "getStarredPackagesByUser",
        "tags": [
          "Packages"
        ],
        "operationId": "getStarredPackagesByUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "integer",
            "format": "int32",
            "maximum": 60.0,
            "exclusiveMaximum": false,
            "description": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/PackageSummary"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of starred packages",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/packages/backstage/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getBackstagePluginsDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getBackstagePluginsDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BackstagePlugin"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/container/{repoName}/{packageName}": {
      "get": {
        "description": "Get container image details",
        "summary": "getContainerImageDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getContainerImageDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContainerImage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/coredns/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getCoreDNSPluginDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getCoreDNSPluginDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CoreDNSPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/helm/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getHelmPackageDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getHelmPackageDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HelmPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/helm-plugin/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getHelmPluginDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getHelmPluginDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HelmPluginPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/falco/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getFalcoRulesDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getFalcoRulesDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FalcoPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/gatekeeper/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getGatekeeperPoliciesDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getGatekeeperPoliciesDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GatekeeperPolicy"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/keda-scaler/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getKedaScalerDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKedaScalerDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KedaScalerPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/keptn/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getKeptnIntegrationsDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKeptnIntegrationsDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KeptnIntegrationsPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/knative-client-plugin/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getKnativeClientPluginIntegrationsDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKnativeClientPluginIntegrationsDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KnativeClientPluginsPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/krew/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getKubectlPluginDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKubectlPluginDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KrewPluginsPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/kubewarden/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getKubewardenPoliciesDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKubewardenPoliciesDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KubewardenPoliciesPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/kyverno/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getKyvernoPoliciesDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKyvernoPoliciesDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KyvernoPolicy"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/opa/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getOPAPoliciesDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getOPAPoliciesDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OPAPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/olm/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getOLMOperatorDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getOLMOperatorDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OLMPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/tbaction/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getTinkerbellActionsDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getTinkerbellActionsDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TBActionPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/tekton-pipeline/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getTektonPipelineDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getTektonPipelineDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TektonPipelinePackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/tekton-task/{repoName}/{packageName}": {
      "get": {
        "description": "Get package details",
        "summary": "getTektonTaskDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getTektonTaskDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TektonTaskPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/backstage/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getBackstagePluginsVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getBackstagePluginsVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BackstagePlugin"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/container/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get container image details",
        "summary": "getContainerImageVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getContainerImageVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContainerImage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/coredns/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package details",
        "summary": "getCoreDNSPluginVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getCoreDNSPluginVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CoreDNSPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/falco/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getFalcoRulesVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getFalcoRulesVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FalcoPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/gatekeeper/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getGatekeeperPoliciesVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getGatekeeperPoliciesVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GatekeeperPolicy"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/helm/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getHelmPackageVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getHelmPackageVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HelmPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/helm-plugin/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getHelmPluginVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getHelmPluginVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HelmPluginPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/keda-scaler/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getKedaScalerVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKedaScalerVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KedaScalerPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/keptn/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getKeptnIntegrationsVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKeptnIntegrationsVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KeptnIntegrationsPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/knative-client-plugin/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getKnativeClientPluginsVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKnativeClientPluginsVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KnativeClientPluginsPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/krew/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getKubectlPluginVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKubectlPluginVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KrewPluginsPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/kubewarden/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getKubewardenPoliciesVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKubewardenPoliciesVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KubewardenPoliciesPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/kyverno/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getKyvernoPoliciesVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getKyvernoPoliciesVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KyvernoPolicy"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/opa/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getOPAPoliciesVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getOPAPoliciesVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OPAPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/olm/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getOLMOperatorVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getOLMOperatorVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OLMPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/tbaction/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getTinkerbellActionsVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getTinkerbellActionsVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TBActionPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/tekton-pipeline/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getTektonPipelineVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getTektonPipelineVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TektonPipelinePackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/tekton-task/{repoName}/{packageName}/{version}": {
      "get": {
        "description": "Get package version details",
        "summary": "getTektonTaskVersionDetails",
        "tags": [
          "Packages"
        ],
        "operationId": "getTektonTaskVersionDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TektonTaskPackage"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{repoKindParam}/{repoName}/{packageName}/changelog.md": {
      "get": {
        "description": "Get package's changelog in markdown format",
        "summary": "generateChangelogMD",
        "tags": [
          "Packages"
        ],
        "operationId": "generateChangelogMD",
        "deprecated": false,
        "produces": [
          "text/markdown",
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoKindParam",
            "in": "path",
            "required": true,
            "enum": [
              "helm",
              "opa",
              "falco",
              "olm",
              "tbaction",
              "krew",
              "helm-plugin",
              "tekton-task",
              "keda-scaler",
              "coredns",
              "keptn",
              "tekton-pipeline",
              "container",
              "kubewarden",
              "gatekeeper",
              "kyverno",
              "knative-client-plugin",
              "backstage"
            ],
            "type": "string",
            "description": "Package kind name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "default": ""
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{repoKindParam}/{repoName}/{packageName}/production-usage": {
      "get": {
        "description": "Get a summary of which of the organizations the user belongs to are using the package in production",
        "summary": "getProductionUsage",
        "tags": [
          "Packages"
        ],
        "operationId": "getProductionUsage",
        "deprecated": false,
        "produces": [
          "text/markdown",
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoKindParam",
            "in": "path",
            "required": true,
            "enum": [
              "helm",
              "opa",
              "falco",
              "olm",
              "tbaction",
              "krew",
              "helm-plugin",
              "tekton-task",
              "keda-scaler",
              "coredns",
              "keptn",
              "tekton-pipeline",
              "container",
              "kubewarden",
              "gatekeeper",
              "kyverno",
              "knative-client-plugin",
              "backstage"
            ],
            "type": "string",
            "description": "Package kind name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/ProductionUsageOrganization"
              }
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{repoKindParam}/{repoName}/{packageName}/production-usage/${orgName}": {
      "post": {
        "description": "Add organization to package's production users list",
        "summary": "addProductionUsage",
        "tags": [
          "Packages"
        ],
        "operationId": "addProductionUsage",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoKindParam",
            "in": "path",
            "required": true,
            "enum": [
              "helm",
              "opa",
              "falco",
              "olm",
              "tbaction",
              "krew",
              "helm-plugin",
              "tekton-task",
              "keda-scaler",
              "coredns",
              "keptn",
              "tekton-pipeline",
              "container",
              "kubewarden",
              "gatekeeper",
              "kyverno",
              "knative-client-plugin",
              "backstage"
            ],
            "type": "string",
            "description": "Package kind name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete organization from package's production usage list",
        "summary": "deleteProductionUsage",
        "tags": [
          "Packages"
        ],
        "operationId": "deleteProductionUsage",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoKindParam",
            "in": "path",
            "required": true,
            "enum": [
              "helm",
              "opa",
              "falco",
              "olm",
              "tbaction",
              "krew",
              "helm-plugin",
              "tekton-task",
              "keda-scaler",
              "coredns",
              "keptn",
              "tekton-pipeline",
              "container",
              "kubewarden",
              "gatekeeper",
              "kyverno",
              "knative-client-plugin",
              "backstage"
            ],
            "type": "string",
            "description": "Package kind name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          },
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/packages/{repoKindParam}/{repoName}/{packageName}/summary": {
      "get": {
        "description": "Get package summary details",
        "summary": "getPackageSummary",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageSummary",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repoKindParam",
            "in": "path",
            "required": true,
            "enum": [
              "helm",
              "opa",
              "falco",
              "olm",
              "tbaction",
              "krew",
              "helm-plugin",
              "tekton-task",
              "keda-scaler",
              "coredns",
              "keptn",
              "tekton-pipeline",
              "container",
              "kubewarden",
              "gatekeeper",
              "kyverno",
              "knative-client-plugin",
              "backstage"
            ],
            "type": "string",
            "description": "Package kind name"
          },
          {
            "name": "repoName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Repository name"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PackageSummary"
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{packageID}/stars": {
      "get": {
        "description": "Get package stars",
        "summary": "getPackageStars",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageStars",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PackagesStarsResponse"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Toggle package's star",
        "summary": "togglePackageStar",
        "tags": [
          "Packages"
        ],
        "operationId": "togglePackageStar",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/packages/{packageID}/{version}/security-report": {
      "get": {
        "description": "Get package security report",
        "summary": "getPackageSecurityReport",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageSecurityReport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "default": ""
            },
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{packageID}/{version}/values": {
      "get": {
        "description": "Get chart values",
        "summary": "getChartValues",
        "tags": [
          "Packages"
        ],
        "operationId": "getChartValues",
        "deprecated": false,
        "produces": [
          "application/yaml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "default": ""
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{packageID}/{version}/values-schema": {
      "get": {
        "description": "Get package values schema",
        "summary": "getPackageValuesSchema",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageValuesSchema",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "default": ""
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{packageID}/changelog": {
      "get": {
        "description": "Get package changelogs",
        "summary": "getPackageChangelog",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageChangelog",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/PackagesChangelogResponse"
              }
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{packageID}/{version}/templates": {
      "get": {
        "description": "Get the templates for a Helm chart package",
        "summary": "getHelmChartTemplates",
        "tags": [
          "Packages"
        ],
        "operationId": "getHelmChartTemplates",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Package version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PackagesTemplatesResponse"
            },
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "404": {
            "description": "The requested resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/packages/{packageID}/views": {
      "get": {
        "description": "Get the views of the package provided",
        "summary": "getPackageViews",
        "tags": [
          "Packages"
        ],
        "operationId": "getPackageViews",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "default": ""
            },
            "examples": {
              "application/json": {
                "1.0.1": {
                  "2021-12-09": 12,
                  "2021-12-08": 30
                },
                "1.0.0": {
                  "2021-12-09": 2,
                  "2021-12-08": 5
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "description": "Get user's subscriptions",
        "summary": "getUserSubscriptions",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getUserSubscriptions",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "integer",
            "format": "int32",
            "maximum": 60.0,
            "exclusiveMaximum": false,
            "description": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/SubscriptionsResponse"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of subscriptions",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "post": {
        "description": "Add subscription",
        "summary": "addPackageSubscription",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "addPackageSubscription",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Subscription request body",
            "schema": {
              "$ref": "#/definitions/SubscriptionBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete subscription",
        "summary": "deletePackageSubscription",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "deletePackageSubscription",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          },
          {
            "name": "event_kind",
            "in": "query",
            "required": true,
            "enum": [
              "0",
              "1",
              "2",
              "4"
            ],
            "type": "string",
            "description": "Event kind"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/subscriptions/{packageID}": {
      "get": {
        "description": "Get user's subscriptions for the given package",
        "summary": "getPackageUserSubscriptions",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getPackageUserSubscriptions",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/SubscriptionsResponse1"
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/subscriptions/opt-out": {
      "get": {
        "description": "Get user's opt-out entries",
        "summary": "getUserOptOutEntries",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getUserOptOutEntries",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": false,
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "integer",
            "format": "int32",
            "maximum": 60.0,
            "exclusiveMaximum": false,
            "description": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/SubscriptionsOptOutResponse"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of user's opt-out entries",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "post": {
        "description": "Add opt-out entry",
        "summary": "addOptOutEntry",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "addOptOutEntry",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Opt-out entry request body",
            "schema": {
              "$ref": "#/definitions/OptOutBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/subscriptions/opt-out/{optOutID}": {
      "delete": {
        "description": "Delete opt-out entry",
        "summary": "deleteOptOutEntry",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "deleteOptOutEntry",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "optOutID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Opt-out entry ID"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/webhooks/user": {
      "get": {
        "description": "Get user's webhooks",
        "summary": "getUserWebhooks",
        "tags": [
          "Webhooks"
        ],
        "operationId": "getUserWebhooks",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/Webhook"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of user's webhooks",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "post": {
        "description": "Add user's webhook",
        "summary": "addUserWebhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "addUserWebhook",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Webhook body",
            "schema": {
              "$ref": "#/definitions/WebhookSummaryWithPackages"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/webhooks/user/{webhookID}": {
      "get": {
        "description": "Get user's webhook",
        "summary": "getUserWebhookDetail",
        "tags": [
          "Webhooks"
        ],
        "operationId": "getUserWebhookDetail",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhookID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "put": {
        "description": "Update user's webhook",
        "summary": "updateUserWebhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "updateUserWebhook",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhookID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook ID"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Webhook body",
            "schema": {
              "$ref": "#/definitions/WebhookSummaryWithPackages"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete user's webhook",
        "summary": "deleteUserWebhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteUserWebhook",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webhookID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook ID"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/webhooks/org/{orgName}": {
      "get": {
        "description": "Get organization's webhooks",
        "summary": "getOrganizationWebhooks",
        "tags": [
          "Webhooks"
        ],
        "operationId": "getOrganizationWebhooks",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "default": "",
              "items": {
                "$ref": "#/definitions/Webhook"
              }
            },
            "headers": {
              "Pagination-Total-Count": {
                "description": "Total number of organization's webhooks",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "post": {
        "description": "Add organization's webhook",
        "summary": "addOrganizationWebhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "addOrganizationWebhook",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Webhook body",
            "schema": {
              "$ref": "#/definitions/WebhookSummaryWithPackages"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and has led to the creation of a resource",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/webhooks/org/{orgName}/{webhookID}": {
      "get": {
        "description": "Get organization's webhook",
        "summary": "getOrganizationWebhookDetails",
        "tags": [
          "Webhooks"
        ],
        "operationId": "getOrganizationWebhookDetails",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "webhookID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook ID"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Webhook"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "put": {
        "description": "Update organization's webhook",
        "summary": "updateOrganizationWebhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "updateOrganizationWebhook",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "webhookID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook ID"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Webhook body",
            "schema": {
              "$ref": "#/definitions/WebhookSummaryWithPackages"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      },
      "delete": {
        "description": "Delete organization's webhook",
        "summary": "deleteOrganizationWebhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteOrganizationWebhook",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Organization name"
          },
          {
            "name": "webhookID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook ID"
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "403": {
            "description": "The user does not have permission to perform the requested operation",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/webhooks/test": {
      "post": {
        "description": "Trigger webhook test",
        "summary": "triggerWebhookTest",
        "tags": [
          "Webhooks"
        ],
        "operationId": "triggerWebhookTest",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "enum": [
              "application/json"
            ],
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "$ref": "#/definitions/WebhookTest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request has succeeded, no content returned",
            "headers": {}
          },
          "400": {
            "description": "The request sent was not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "401": {
            "description": "Valid authentication credentials not provided",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyId": [],
            "ApiKeySecret": []
          }
        ]
      }
    },
    "/stats": {
      "get": {
        "description": "Get Artifact Hub stats",
        "summary": "getArtifactHubStats",
        "tags": [
          "Stats"
        ],
        "operationId": "getArtifactHubStats",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/StatsResponse"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/harbor-replication": {
      "get": {
        "description": "Get Harbor replication dump",
        "summary": "getHarborReplicationDump",
        "tags": [
          "Integrations"
        ],
        "operationId": "getHarborReplicationDump",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HarborReplicationResponse"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    },
    "/helm-exporter": {
      "get": {
        "description": "Get the latest version available of all charts listed in Artifact Hub.",
        "summary": "getHelmExporterDump",
        "tags": [
          "Integrations"
        ],
        "operationId": "getHelmExporterDump",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HelmExporterResponse"
            },
            "headers": {}
          },
          "429": {
            "description": "The user has sent too many requests in a given amount of time",
            "headers": {}
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "AuthorizerAction": {
      "title": "AuthorizerAction",
      "description": "Authorization policy action:\n* `all` - All actions\n* `addOrganizationMember` - Add member to organization\n* `addOrganizationRepository` - Add repository to organization\n* `deleteOrganization` - Delete organization\n* `deleteOrganizationMember` - Delete member from organization\n* `deleteOrganizationRepository` - Delete repository from organization\n* `getAuthorizationPolicy` - Get authorization policy\n* `transferOrganizationRepository` - Transfer repository from organization\n* `updateAuthorizationPolicy` - Update authorization policy\n* `updateOrganization` - Update organization\n* `updateOrganizationRepository` - Update repository from organization",
      "type": "string",
      "enum": [
        "all",
        "addOrganizationMember",
        "addOrganizationRepository",
        "deleteOrganization",
        "deleteOrganizationMember",
        "deleteOrganizationRepository",
        "getAuthorizationPolicy",
        "transferOrganizationRepository",
        "updateAuthorizationPolicy",
        "updateOrganization",
        "updateOrganizationRepository"
      ]
    },
    "AuthorizationPolicy": {
      "title": "AuthorizationPolicy",
      "type": "object",
      "properties": {
        "authorization_enabled": {
          "type": "boolean"
        },
        "predefined_policy": {
          "example": "rbac.v1",
          "type": "string"
        },
        "custom_policy": {
          "example": "package artifacthub.authz\n\n# By default, deny requests\ndefault allow = false\n\n# Allow the action if the user is allowed to perform it\nallow {\n  # If user's role is owner\n  data.roles.owner.users[_] == input.user\n}\nallow {\n  # If user's role is allowed to perform this action\n  allowed_actions[_] == input.action\n}\n\n# Get user allowed actions\nallowed_actions[action] {\n  user_roles[_] == \"owner\"\n  action := \"all\"\n}\nallowed_actions[action] {\n  action := data.roles[role].allowed_actions[_]\n  user_roles[_] == role\n}\n\n# Get user roles\nuser_roles[role] {\n  data.roles[role].users[_] == input.user\n}\n",
          "type": "string"
        },
        "policy_data": {
          "example": {
            "roles": {
              "owner": {
                "users": [
                  "user1"
                ]
              },
              "customRole1": {
                "users": [
                  "member1",
                  "member2"
                ],
                "allowed_actions": [
                  "addOrganizationMember",
                  "addOrganizationRepository"
                ]
              }
            }
          },
          "type": "object"
        }
      },
      "required": [
        "authorization_enabled"
      ]
    },
    "ChangelogItemKind": {
      "title": "ChangelogItemKind",
      "description": "Types of changes:\n  * `added` - New features\n  * `changed` - Changes in existing functionality\n  * `deprecated` - Soon-to-be removed features\n  * `removed` - Removed features\n  * `fixed` - Any bug fixed\n  * `security` - In case of vulnerabilities",
      "type": "string",
      "enum": [
        "added",
        "changed",
        "deprecated",
        "removed",
        "fixed",
        "security"
      ]
    },
    "Error": {
      "title": "Error",
      "type": "object",
      "properties": {
        "message": {
          "example": "error details",
          "type": "string"
        }
      }
    },
    "EventKindId": {
      "title": "EventKindId",
      "description": "Event kind:\n  * `0` - New package release\n  * `1` - Security alerts\n  * `2` - Repository tracking errors\n  * `4` - Repository scanning errors",
      "type": "integer",
      "format": "int32",
      "enum": [
        "0",
        "1",
        "2",
        "4"
      ]
    },
    "Facets": {
      "title": "Facets",
      "example": {
        "title": "Publisher",
        "filter_key": "publisher",
        "options": [
          {
            "id": "f41e7480-8d5c-40d3-9ba6-65ac0da8fc9c",
            "name": "Helm",
            "total": 292,
            "filter_key": "org"
          },
          {
            "id": "b771c9a8-0076-444c-ad5e-927abe14173d",
            "name": "Artifact Hub",
            "total": 1,
            "filter_key": "org"
          },
          {
            "id": "a70u69a8-0326-324c-fd3e-0iu87e14173d",
            "name": "user1",
            "total": 3,
            "filter_key": "user"
          }
        ]
      },
      "type": "object",
      "properties": {
        "filter_key": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        }
      },
      "required": [
        "filter_key",
        "title",
        "options"
      ]
    },
    "BackstagePlugin": {
      "title": "BackstagePlugin",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "ContainerImage": {
      "title": "ContainerImage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "CoreDNSPackage": {
      "title": "CoreDNSPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "FalcoPackage": {
      "title": "FalcoPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data1"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "GatekeeperPolicy": {
      "title": "GatekeeperPolicy",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "relative_path": {
          "example": "/general/allowedrepos",
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/Data2"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "HelmPackage": {
      "title": "HelmPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "sign_key": {
          "$ref": "#/definitions/SignKey"
        },
        "crds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Crd"
          }
        },
        "crds_examples": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "data": {
          "$ref": "#/definitions/Data3"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "HelmPluginPackage": {
      "title": "HelmPluginPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "KedaScalerPackage": {
      "title": "KedaScalerPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "KeptnIntegrationsPackage": {
      "title": "KeptnIntegrationsPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data4"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "KnativeClientPluginsPackage": {
      "title": "KnativeClientPluginsPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "KrewPluginsPackage": {
      "title": "KrewPluginsPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data5"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "KubewardenPoliciesPackage": {
      "title": "KubewardenPoliciesPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data6"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "KyvernoPolicy": {
      "title": "KyvernoPolicy",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "relative_path": {
          "example": "/general/allowedrepos",
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/Data7"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "Link": {
      "title": "Link",
      "type": "object",
      "properties": {
        "url": {
          "example": "http://url",
          "type": "string"
        },
        "name": {
          "example": "link",
          "type": "string"
        }
      },
      "required": [
        "url",
        "name"
      ]
    },
    "Maintainer": {
      "title": "Maintainer",
      "type": "object",
      "properties": {
        "maintainer_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "maintainer1",
          "type": "string"
        },
        "email": {
          "example": "maintainer@email.com",
          "type": "string"
        }
      },
      "required": [
        "name",
        "email"
      ]
    },
    "Member": {
      "title": "Member",
      "type": "object",
      "properties": {
        "alias": {
          "example": "jdoe",
          "type": "string"
        },
        "first_name": {
          "example": "John",
          "type": "string"
        },
        "last_name": {
          "example": "Doe",
          "type": "string"
        },
        "confirmed": {
          "example": true,
          "type": "boolean"
        }
      },
      "required": [
        "alias",
        "confirmed"
      ]
    },
    "OLMPackage": {
      "title": "OLMPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "crds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Crd"
          }
        },
        "crds_examples": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "data": {
          "$ref": "#/definitions/Data8"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "OPAPackage": {
      "title": "OPAPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data9"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "TBActionPackage": {
      "title": "TBActionPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "TektonPipelinePackage": {
      "title": "TektonPipelinePackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data10"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "TektonTaskPackage": {
      "title": "TektonTaskPackage",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        },
        "data": {
          "$ref": "#/definitions/Data11"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "Package": {
      "title": "Package",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "example": 1552082346,
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "is_operator": {
          "example": false,
          "type": "boolean"
        },
        "latest_version": {
          "example": "2.0.0",
          "type": "string"
        },
        "logo_url": {
          "example": "http://logo",
          "type": "string"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "keywords": {
          "example": [
            "key1",
            "key2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "home_url": {
          "example": "http://home",
          "type": "string"
        },
        "readme": {
          "example": "###Readme",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "available_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableVersion"
          }
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Maintainer"
          }
        },
        "default_channel": {
          "example": "stable",
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "provider": {
          "example": "Provider 1",
          "type": "string"
        },
        "containers_images": {
          "$ref": "#/definitions/ContainersImages"
        },
        "capabilities": {
          "example": "seamless upgrades",
          "type": "string"
        },
        "security_report_created_at": {
          "type": "integer",
          "format": "int32"
        },
        "has_values_schema": {
          "type": "boolean"
        },
        "has_changelog": {
          "type": "boolean"
        },
        "content_url": {
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "latest_version",
        "available_versions",
        "has_values_schema",
        "has_changelog",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "PackageBase": {
      "title": "PackageBase",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository"
      ]
    },
    "PackageCategoryId": {
      "title": "PackageCategoryId",
      "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging",
      "type": "integer",
      "format": "int32",
      "enum": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "PackageSummary": {
      "title": "PackageSummary",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "display_name": {
          "example": "Package 1",
          "type": "string"
        },
        "description": {
          "example": "This is a package sample",
          "type": "string"
        },
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "app_version": {
          "example": "0.1.0",
          "type": "string"
        },
        "license": {
          "example": "MIT",
          "type": "string"
        },
        "deprecated": {
          "example": false,
          "type": "boolean"
        },
        "signed": {
          "example": false,
          "type": "boolean"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "ts": {
          "type": "integer",
          "format": "int32"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "security_report_summary": {
          "$ref": "#/definitions/SecurityReportSummary"
        },
        "all_containers_images_whitelisted": {
          "example": false,
          "type": "boolean"
        },
        "production_organizations_count": {
          "type": "number",
          "format": "double"
        },
        "category": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PackageCategoryId"
            },
            {
              "description": "Package category:\n  * `1` - AI / Machine learning\n  * `2` - Database\n  * `3` - Integration and delivery\n  * `4` - Monitoring and logging\n  * `5` - Networking\n  * `6` - Security\n  * `7` - Storage\n  * `8` - Streaming and messaging"
            }
          ]
        },
        "stars": {
          "example": 3,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "version",
        "ts",
        "repository",
        "stars"
      ]
    },
    "Repository": {
      "title": "Repository",
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "format": "uuid"
        },
        "kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryKind"
            },
            {
              "description": "Repository kind:\n  * `0` - Helm charts\n  * `1` - Falco rules\n  * `2` - OPA policies\n  * `3` - OLM operators\n  * `4` - Tinkerbell actions\n  * `5` - Krew kubectl plugins\n  * `6` - Helm plugins\n  * `7` - Tekton tasks\n  * `8` - KEDA scalers\n  * `9` - Core DNS plugins\n  * `10` - Keptn integrations\n  * `11` - Tekton pipelines\n  * `12` - Container images\n  * `13` - Kubewarden policies\n  * `14` - Gatekeeper policies\n  * `15` - Kyverno policies\n  * `16` - Knative client plugins\n  * `17` - Backstage plugins"
            }
          ]
        },
        "name": {
          "example": "repo1",
          "type": "string"
        },
        "display_name": {
          "example": "Repository 1",
          "type": "string"
        },
        "url": {
          "example": "http://repourl",
          "type": "string"
        },
        "verified_publisher": {
          "type": "boolean"
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "private": {
          "type": "boolean"
        },
        "scanner_disabled": {
          "example": false,
          "type": "boolean"
        },
        "user_alias": {
          "example": "jdoe",
          "type": "string"
        },
        "organization_name": {
          "example": "org1",
          "type": "string"
        },
        "organization_display_name": {
          "example": "Organization 1",
          "type": "string"
        },
        "digest": {
          "type": "string"
        },
        "last_tracking_ts": {
          "type": "integer",
          "format": "int32"
        },
        "last_tracking_errors": {
          "example": "Error",
          "type": "string"
        },
        "last_scanning_ts": {
          "type": "integer",
          "format": "int32"
        },
        "last_scanning_errors": {
          "example": "Error",
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "branch": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/Data12"
        }
      },
      "required": [
        "repository_id",
        "kind",
        "name",
        "url",
        "verified_publisher",
        "official",
        "scanner_disabled",
        "digest",
        "last_tracking_ts",
        "last_scanning_ts",
        "disabled"
      ]
    },
    "RepositoryKind": {
      "title": "RepositoryKind",
      "description": "Repository kind:\n  * `0` - Helm charts\n  * `1` - Falco rules\n  * `2` - OPA policies\n  * `3` - OLM operators\n  * `4` - Tinkerbell actions\n  * `5` - Krew kubectl plugins\n  * `6` - Helm plugins\n  * `7` - Tekton tasks\n  * `8` - KEDA scalers\n  * `9` - Core DNS plugins\n  * `10` - Keptn integrations\n  * `11` - Tekton pipelines\n  * `12` - Container images\n  * `13` - Kubewarden policies\n  * `14` - Gatekeeper policies\n  * `15` - Kyverno policies\n  * `16` - Knative client plugins\n  * `17` - Backstage plugins",
      "type": "integer",
      "format": "int32",
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16"
      ]
    },
    "RepositoryKindParam": {
      "title": "RepositoryKindParam",
      "description": "Repository kind name:\n* `helm` - Helm charts\n* `falco` - Falco rules\n* `opa` - OPA policies\n* `olm` - OLM operators\n* `tbaction` - Tinkerbell actions\n* `krew` - Krew kubectl plugins\n* `helm-plugin` - Helm plugins\n* `tekton` - Tekton tasks\n* `keda-scaler` - KEDA scalers\n* `coredns` - Core DNS plugins\n* `keptn` - Keptn integrations\n* `tekton-pipeline` - Tekton pipelines\n* `container` - Container images\n* `kubewarden` - Kubewarden policies\n* `gatekeeper` - Gatekeeper policies\n* `kyverno` - Kyverno policies\n* `knative-client-plugin` - Knative client plugins\n* `backstage` - Backstage plugins",
      "type": "string",
      "enum": [
        "helm",
        "opa",
        "falco",
        "olm",
        "tbaction",
        "krew",
        "helm-plugin",
        "tekton-task",
        "keda-scaler",
        "coredns",
        "keptn",
        "tekton-pipeline",
        "container",
        "kubewarden",
        "gatekeeper",
        "kyverno",
        "knative-client-plugin",
        "backstage"
      ]
    },
    "RepositorySummary": {
      "title": "RepositorySummary",
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "format": "uuid"
        },
        "kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryKind"
            },
            {
              "description": "Repository kind:\n  * `0` - Helm charts\n  * `1` - Falco rules\n  * `2` - OPA policies\n  * `3` - OLM operators\n  * `4` - Tinkerbell actions\n  * `5` - Krew kubectl plugins\n  * `6` - Helm plugins\n  * `7` - Tekton tasks\n  * `8` - KEDA scalers\n  * `9` - Core DNS plugins\n  * `10` - Keptn integrations\n  * `11` - Tekton pipelines\n  * `12` - Container images\n  * `13` - Kubewarden policies\n  * `14` - Gatekeeper policies\n  * `15` - Kyverno policies\n  * `16` - Knative client plugins\n  * `17` - Backstage plugins"
            }
          ]
        },
        "name": {
          "example": "repo1",
          "type": "string"
        },
        "display_name": {
          "example": "Repository 1",
          "type": "string"
        },
        "url": {
          "example": "http://repourl",
          "type": "string"
        },
        "verified_publisher": {
          "type": "boolean"
        },
        "official": {
          "type": "boolean"
        },
        "cncf": {
          "type": "boolean"
        },
        "private": {
          "type": "boolean"
        },
        "scanner_disabled": {
          "example": false,
          "type": "boolean"
        },
        "user_alias": {
          "example": "jdoe",
          "type": "string"
        },
        "organization_name": {
          "example": "org1",
          "type": "string"
        },
        "organization_display_name": {
          "example": "Organization 1",
          "type": "string"
        }
      },
      "required": [
        "repository_id",
        "kind",
        "name",
        "url",
        "verified_publisher",
        "official",
        "scanner_disabled"
      ]
    },
    "Organization": {
      "title": "Organization",
      "type": "object",
      "properties": {
        "name": {
          "example": "org1",
          "type": "string"
        },
        "display_name": {
          "example": "Organization 1",
          "type": "string"
        },
        "description": {
          "example": "description",
          "type": "string"
        },
        "home_url": {
          "example": "http://url",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "members_count": {
          "type": "integer",
          "format": "int32"
        },
        "confirmed": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "members_count",
        "confirmed"
      ]
    },
    "OrganizationSummary": {
      "title": "OrganizationSummary",
      "type": "object",
      "properties": {
        "name": {
          "example": "org1",
          "type": "string"
        },
        "display_name": {
          "example": "Organization 1",
          "type": "string"
        },
        "description": {
          "example": "description",
          "type": "string"
        },
        "home_url": {
          "example": "http://url",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "ProductionUsageOrganization": {
      "title": "ProductionUsageOrganization",
      "type": "object",
      "properties": {
        "name": {
          "example": "org1",
          "type": "string"
        },
        "display_name": {
          "example": "Organization 1",
          "type": "string"
        },
        "home_url": {
          "example": "http://url",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "used_in_production": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "ResourceKindName": {
      "title": "ResourceKindName",
      "description": "Resource kind name:\n  * `repositoryName` - Repository name\n  * `repositoryURL` - Repository URL\n  * `organizationName` - Organization name\n  * `userAlias` - User alias",
      "type": "string",
      "enum": [
        "repositoryName",
        "repositoryURL",
        "organizationName",
        "userAlias"
      ]
    },
    "User": {
      "title": "User",
      "type": "object",
      "properties": {
        "alias": {
          "example": "jdoe",
          "type": "string"
        },
        "first_name": {
          "example": "John",
          "type": "string"
        },
        "last_name": {
          "example": "Doe",
          "type": "string"
        },
        "email": {
          "example": "jdoe@email.com",
          "type": "string"
        },
        "profile_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "password_set": {
          "type": "boolean"
        },
        "tfa_enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "alias",
        "email",
        "password_set"
      ]
    },
    "Webhook": {
      "title": "Webhook",
      "type": "object",
      "properties": {
        "name": {
          "example": "webhook1",
          "type": "string"
        },
        "description": {
          "example": "description",
          "type": "string"
        },
        "url": {
          "example": "http://url",
          "type": "string"
        },
        "secret": {
          "example": "123abc",
          "type": "string"
        },
        "content_type": {
          "example": "application/json",
          "type": "string"
        },
        "template": {
          "example": {
            "text": "Package {{ .Package.Name }} version {{ .Package.Version }} released! {{ .Package.URL }}"
          },
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "event_kinds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventKindId"
          }
        },
        "webhook_id": {
          "type": "string",
          "format": "uuid"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageSummary"
          }
        },
        "last_notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookNotification"
          }
        }
      },
      "required": [
        "name",
        "url",
        "active",
        "webhook_id",
        "packages",
        "last_notifications"
      ]
    },
    "WebhookNotification": {
      "title": "WebhookNotification",
      "type": "object",
      "properties": {
        "notification_id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "integer",
          "format": "int32"
        },
        "processed": {
          "type": "boolean"
        },
        "processed_at": {
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "example": "error",
          "type": "string"
        }
      },
      "required": [
        "notification_id",
        "created_at",
        "processed",
        "processed_at"
      ]
    },
    "WebhookSummary": {
      "title": "WebhookSummary",
      "type": "object",
      "properties": {
        "name": {
          "example": "webhook1",
          "type": "string"
        },
        "description": {
          "example": "description",
          "type": "string"
        },
        "url": {
          "example": "http://url",
          "type": "string"
        },
        "secret": {
          "example": "123abc",
          "type": "string"
        },
        "content_type": {
          "example": "application/json",
          "type": "string"
        },
        "template": {
          "example": {
            "text": "Package {{ .Package.Name }} version {{ .Package.Version }} released! {{ .Package.URL }}"
          },
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "event_kinds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventKindId"
          }
        }
      },
      "required": [
        "name",
        "url",
        "active"
      ]
    },
    "WebhookSummaryWithPackages": {
      "title": "WebhookSummaryWithPackages",
      "type": "object",
      "properties": {
        "name": {
          "example": "webhook1",
          "type": "string"
        },
        "description": {
          "example": "description",
          "type": "string"
        },
        "url": {
          "example": "http://url",
          "type": "string"
        },
        "secret": {
          "example": "123abc",
          "type": "string"
        },
        "content_type": {
          "example": "application/json",
          "type": "string"
        },
        "template": {
          "example": {
            "text": "Package {{ .Package.Name }} version {{ .Package.Version }} released! {{ .Package.URL }}"
          },
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "event_kinds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventKindId"
          }
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Package1"
          }
        }
      },
      "required": [
        "name",
        "url",
        "active",
        "event_kinds",
        "packages"
      ]
    },
    "WebhookTest": {
      "title": "WebhookTest",
      "type": "object",
      "properties": {
        "url": {
          "example": "http://url",
          "type": "string"
        },
        "content_type": {
          "example": "application/json",
          "type": "string"
        },
        "template": {
          "example": {
            "text": "Package {{ .Package.Name }} version {{ .Package.Version }} released! {{ .Package.URL }}"
          },
          "type": "string"
        },
        "event_kinds": {
          "example": [
            0
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventKindId"
          }
        }
      },
      "required": [
        "url",
        "event_kinds"
      ]
    },
    "AvailableVersion": {
      "title": "AvailableVersion",
      "type": "object",
      "properties": {
        "version": {
          "example": "1.0.0",
          "type": "string"
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        },
        "ts": {
          "example": 1618431211,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "version",
        "contains_security_updates",
        "prerelease",
        "ts"
      ]
    },
    "Case": {
      "title": "Case",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "category": {
      "title": "category",
      "type": "integer",
      "format": "int32",
      "enum": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "Change": {
      "title": "Change",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/ChangelogItemKind"
            },
            {
              "description": "Types of changes:\n  * `added` - New features\n  * `changed` - Changes in existing functionality\n  * `deprecated` - Soon-to-be removed features\n  * `removed` - Removed features\n  * `fixed` - Any bug fixed\n  * `security` - In case of vulnerabilities"
            }
          ]
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "required": [
        "description"
      ]
    },
    "Channel": {
      "title": "Channel",
      "type": "object",
      "properties": {
        "name": {
          "example": "stable",
          "type": "string"
        },
        "version": {
          "example": "2.0.0",
          "type": "string"
        }
      }
    },
    "ContainersImages": {
      "title": "ContainersImages",
      "type": "object",
      "properties": {
        "image": {
          "example": "url.io/name/operator:v0.2.0",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "whitelisted": {
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "image"
      ]
    },
    "Crd": {
      "title": "Crd",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "version",
        "description",
        "displayName"
      ]
    },
    "CustomResourcesDefinition": {
      "title": "CustomResourcesDefinition",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name",
        "version",
        "description",
        "displayName"
      ]
    },
    "Data": {
      "title": "Data",
      "type": "object",
      "properties": {
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "alternative_locations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Data1": {
      "title": "Data1",
      "type": "object",
      "properties": {
        "rules": {}
      }
    },
    "Data2": {
      "title": "Data2",
      "type": "object",
      "properties": {
        "template": {
          "example": "apiVersion: templates.gatekeeper.sh/v1 kind: ConstraintTemplate metadata:\n  name: k8sallowedrepos\n  annotations:\n    metadata.gatekeeper.sh/title: \"Kubernetes Allowed Repositories\"\n    description: >-\n      Requires container images to begin with a string from the specified list.",
          "type": "string"
        },
        "examples": {
          "example": [
            {
              "name": "memory-ratio-only",
              "cases": [
                {
                  "name": "constraint",
                  "path": "samples/container-must-meet-ratio/constraint.yaml",
                  "content": "apiVersion: constraints.gatekeeper.sh/v1beta1"
                }
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Example"
          }
        }
      }
    },
    "Data3": {
      "title": "Data3",
      "type": "object",
      "properties": {
        "apiVersion": {
          "example": "v2",
          "type": "string"
        },
        "type": {
          "example": "application",
          "type": "string"
        },
        "kubeVersion": {
          "example": ">=1.16.0-0",
          "type": "string"
        },
        "dependencies": {
          "$ref": "#/definitions/Dependencies"
        }
      }
    },
    "Data4": {
      "title": "Data4",
      "type": "object",
      "properties": {
        "keptn/version": {
          "example": "0.1.0",
          "type": "string"
        },
        "keptn/kind": {
          "example": "service,sli-provider",
          "type": "string"
        }
      }
    },
    "Data5": {
      "title": "Data5",
      "type": "object",
      "properties": {
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "manifestRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Data6": {
      "title": "Data6",
      "type": "object",
      "properties": {
        "kubewarden/resources": {
          "example": "Pod",
          "type": "string"
        },
        "kubewarden/mutation": {
          "example": "true",
          "type": "string"
        }
      }
    },
    "Data7": {
      "title": "Data7",
      "type": "object",
      "properties": {
        "policy": {
          "example": "apiVersion: kyverno.io/v1 kind: ClusterPolicy metadata:\n  name: add-certificates-volume\n  annotations:\n    policies.kyverno.io/title: Add Certificates as a Volume\n    policies.kyverno.io/category: Sample\n    policies.kyverno.io/subject: Pod,Volume",
          "type": "string"
        },
        "kyverno/subject": {
          "example": "Pod, Volume",
          "type": "string"
        },
        "kyverno/version": {
          "example": "1.5.0",
          "type": "string"
        },
        "kyverno/kubernetesVersion": {
          "example": "1.21",
          "type": "string"
        },
        "kyverno/category": {
          "example": "OpenShift",
          "type": "string"
        }
      }
    },
    "Data8": {
      "title": "Data8",
      "type": "object",
      "properties": {
        "isGlobalOperator": {
          "type": "boolean"
        },
        "customResourcesDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomResourcesDefinition"
          }
        },
        "customResourcesDefinitionsExamples": {
          "example": "[{\"apiVersion\": v1alpha\n, \"kind\": CustomResource\n, \"spec\": {\n  \"replicas\": 1\n  }\n}}]",
          "type": "string"
        }
      },
      "required": [
        "isGlobalOperator"
      ]
    },
    "Data9": {
      "title": "Data9",
      "type": "object",
      "properties": {
        "policies": {
          "example": {
            "policy1": "- macro: text\n  condition: (evt.num < 0)\n"
          },
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Data10": {
      "title": "Data10",
      "type": "object",
      "properties": {
        "pipelines.minVersion": {
          "example": "2.0.0",
          "type": "string"
        },
        "manifestRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tasks": {
          "$ref": "#/definitions/Tasks"
        },
        "examples": {
          "type": "object"
        },
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Data11": {
      "title": "Data11",
      "type": "object",
      "properties": {
        "pipelines.minVersion": {
          "example": "2.0.0",
          "type": "string"
        },
        "manifestRaw": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "examples": {
          "type": "object"
        },
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Data12": {
      "title": "Data12",
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Dependencies": {
      "title": "Dependencies",
      "type": "object",
      "properties": {
        "name": {
          "example": "mysql",
          "type": "string"
        },
        "version": {
          "example": "1.6.4",
          "type": "string"
        },
        "repository": {
          "example": "http://repo.url",
          "type": "string"
        }
      },
      "required": [
        "name",
        "version",
        "repository"
      ]
    },
    "Example": {
      "title": "Example",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "cases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Case"
          }
        }
      }
    },
    "HarborReplicationResponse": {
      "title": "HarborReplicationResponse",
      "type": "object",
      "properties": {
        "repository": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "HelmExporterResponse": {
      "title": "HelmExporterResponse",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/Link"
        }
      }
    },
    "Option": {
      "title": "Option",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "filter_key": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "total"
      ]
    },
    "OptOutBody": {
      "title": "OptOutBody",
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "string",
          "format": "uuid"
        },
        "event_kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EventKindId"
            },
            {
              "description": "Event kind:\n  * `0` - New package release\n  * `1` - Security alerts\n  * `2` - Repository tracking errors\n  * `4` - Repository scanning errors"
            }
          ]
        }
      },
      "required": [
        "repository_id",
        "event_kind"
      ]
    },
    "Organizations": {
      "title": "Organizations",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "running_total": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "required": [
        "total"
      ]
    },
    "Package1": {
      "title": "Package1",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "package_id"
      ]
    },
    "Packages": {
      "title": "Packages",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "running_total": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "created_monthly": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "views_daily": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "required": [
        "total"
      ]
    },
    "PackagesChangelogResponse": {
      "title": "PackagesChangelogResponse",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "ts": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "contains_security_updates": {
          "type": "boolean"
        },
        "prerelease": {
          "type": "boolean"
        }
      },
      "required": [
        "version",
        "ts",
        "contains_security_updates",
        "prerelease"
      ]
    },
    "PackagesSearchResponse": {
      "title": "PackagesSearchResponse",
      "type": "object",
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageSummary"
          }
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Facets"
          }
        }
      }
    },
    "PackagesStarsResponse": {
      "title": "PackagesStarsResponse",
      "type": "object",
      "properties": {
        "stars": {
          "type": "integer",
          "format": "int32"
        },
        "starred_by_user": {
          "type": "boolean"
        }
      }
    },
    "PackagesStatsResponse": {
      "title": "PackagesStatsResponse",
      "type": "object",
      "properties": {
        "packages": {
          "type": "integer",
          "format": "int32"
        },
        "releases": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PackagesTemplatesResponse": {
      "title": "PackagesTemplatesResponse",
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Template"
          }
        },
        "values": {
          "type": "object"
        }
      },
      "required": [
        "templates",
        "values"
      ]
    },
    "Recommendation": {
      "title": "Recommendation",
      "type": "object",
      "properties": {
        "url": {
          "example": "https://artifacthub.io/packages/helm/artifact-hub/artifact-hub",
          "type": "string"
        }
      }
    },
    "Repositories": {
      "title": "Repositories",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "running_total": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "created_monthly": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "required": [
        "total"
      ]
    },
    "RepositoryBody": {
      "title": "RepositoryBody",
      "type": "object",
      "properties": {
        "kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RepositoryKind"
            },
            {
              "description": "Repository kind:\n  * `0` - Helm charts\n  * `1` - Falco rules\n  * `2` - OPA policies\n  * `3` - OLM operators\n  * `4` - Tinkerbell actions\n  * `5` - Krew kubectl plugins\n  * `6` - Helm plugins\n  * `7` - Tekton tasks\n  * `8` - KEDA scalers\n  * `9` - Core DNS plugins\n  * `10` - Keptn integrations\n  * `11` - Tekton pipelines\n  * `12` - Container images\n  * `13` - Kubewarden policies\n  * `14` - Gatekeeper policies\n  * `15` - Kyverno policies\n  * `16` - Knative client plugins\n  * `17` - Backstage plugins"
            }
          ]
        },
        "name": {
          "example": "repo1",
          "type": "string"
        },
        "display_name": {
          "example": "Repo 1",
          "type": "string"
        },
        "url": {
          "example": "http://repo-url.com",
          "type": "string"
        }
      }
    },
    "Rule": {
      "title": "Rule",
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Raw": {
          "example": "- macro: text\n  condition: (evt.num < 0)\n",
          "type": "string"
        }
      }
    },
    "SecurityReportSummary": {
      "title": "SecurityReportSummary",
      "type": "object",
      "properties": {
        "critical": {
          "type": "number",
          "format": "double"
        },
        "high": {
          "type": "number",
          "format": "double"
        },
        "medium": {
          "type": "number",
          "format": "double"
        },
        "low": {
          "type": "number",
          "format": "double"
        },
        "unknown": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Signature": {
      "title": "Signature",
      "type": "string",
      "enum": [
        "prov",
        "cosign"
      ]
    },
    "SignKey": {
      "title": "SignKey",
      "type": "object",
      "properties": {
        "fingerprint": {
          "example": "0011223344",
          "type": "string"
        },
        "url": {
          "example": "https://key.url",
          "type": "string"
        }
      }
    },
    "Snapshots": {
      "title": "Snapshots",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "running_total": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "created_monthly": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "required": [
        "total"
      ]
    },
    "sort": {
      "title": "sort",
      "example": "relevance",
      "type": "string",
      "enum": [
        "relevance",
        "stars"
      ]
    },
    "Stats": {
      "title": "Stats",
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "webhooks": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "subscriptions",
        "webhooks"
      ]
    },
    "StatsResponse": {
      "title": "StatsResponse",
      "example": {
        "generated_at": 1615980004171,
        "packages": {
          "total": 969,
          "running_total": [
            [
              1585612800000,
              917
            ],
            [
              1585872000000,
              918
            ],
            [
              1586736000000,
              937
            ],
            [
              1586908800000,
              938
            ],
            [
              1586995200000,
              949
            ],
            [
              1587340800000,
              953
            ],
            [
              1587427200000,
              955
            ],
            [
              1587513600000,
              969
            ]
          ],
          "created_monthly": [
            [
              1583020800000,
              917
            ],
            [
              1585699200000,
              52
            ]
          ],
          "views_daily": [
            [
              1639731010000,
              800
            ],
            [
              1639644610000,
              820
            ]
          ]
        },
        "snapshots": {
          "total": 3998,
          "running_total": [
            [
              1585612800000,
              3906
            ],
            [
              1585699200000,
              3922
            ],
            [
              1585785600000,
              3935
            ],
            [
              1585872000000,
              3948
            ],
            [
              1586044800000,
              3951
            ],
            [
              1586131200000,
              3959
            ],
            [
              1586217600000,
              3981
            ],
            [
              1586304000000,
              3998
            ]
          ],
          "created_monthly": [
            [
              1583020800000,
              3906
            ],
            [
              1585699200000,
              92
            ]
          ]
        },
        "repositories": {
          "total": 181,
          "running_total": [
            [
              1585612800000,
              172
            ],
            [
              1585872000000,
              173
            ],
            [
              1586736000000,
              176
            ],
            [
              1586908800000,
              177
            ],
            [
              1586995200000,
              181
            ]
          ]
        },
        "organizations": {
          "total": 8,
          "running_total": [
            [
              1585612800000,
              3
            ],
            [
              1585785600000,
              6
            ],
            [
              1585872000000,
              7
            ],
            [
              1586217600000,
              8
            ]
          ]
        },
        "users": {
          "total": 9,
          "running_total": [
            [
              1584403200000,
              3
            ],
            [
              1584489600000,
              5
            ],
            [
              1584576000000,
              6
            ],
            [
              1584662400000,
              8
            ],
            [
              1584921600000,
              9
            ]
          ]
        }
      },
      "type": "object",
      "properties": {
        "generated_at": {
          "type": "integer",
          "format": "int32"
        },
        "packages": {
          "$ref": "#/definitions/Packages"
        },
        "repositories": {
          "$ref": "#/definitions/Repositories"
        },
        "snapshots": {
          "$ref": "#/definitions/Snapshots"
        },
        "organizations": {
          "$ref": "#/definitions/Organizations"
        },
        "users": {
          "$ref": "#/definitions/Users"
        }
      },
      "required": [
        "generated_at",
        "packages",
        "repositories",
        "snapshots",
        "organizations",
        "users"
      ]
    },
    "SubscriptionBody": {
      "title": "SubscriptionBody",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "event_kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EventKindId"
            },
            {
              "description": "Event kind:\n  * `0` - New package release\n  * `1` - Security alerts\n  * `2` - Repository tracking errors\n  * `4` - Repository scanning errors"
            }
          ]
        }
      },
      "required": [
        "package_id",
        "event_kind"
      ]
    },
    "SubscriptionsOptOutResponse": {
      "title": "SubscriptionsOptOutResponse",
      "type": "object",
      "properties": {
        "opt_out_id": {
          "type": "string",
          "format": "uuid"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "event_kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EventKindId"
            },
            {
              "description": "Event kind:\n  * `0` - New package release\n  * `1` - Security alerts\n  * `2` - Repository tracking errors\n  * `4` - Repository scanning errors"
            }
          ]
        }
      },
      "required": [
        "opt_out_id",
        "repository",
        "event_kind"
      ]
    },
    "SubscriptionsResponse": {
      "title": "SubscriptionsResponse",
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "example": "pkg1",
          "type": "string"
        },
        "normalized_name": {
          "example": "pkg1",
          "type": "string"
        },
        "logo_image_id": {
          "example": "12345abcde",
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/RepositorySummary"
        },
        "event_kinds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventKindId"
          }
        }
      },
      "required": [
        "package_id",
        "name",
        "normalized_name",
        "repository",
        "event_kinds"
      ]
    },
    "SubscriptionsResponse1": {
      "title": "SubscriptionsResponse1",
      "type": "object",
      "properties": {
        "event_kind": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EventKindId"
            },
            {
              "description": "Event kind:\n  * `0` - New package release\n  * `1` - Security alerts\n  * `2` - Repository tracking errors\n  * `4` - Repository scanning errors"
            }
          ]
        }
      },
      "required": [
        "event_kind"
      ]
    },
    "Tag": {
      "title": "Tag",
      "type": "object",
      "properties": {
        "name": {
          "example": "stable",
          "type": "string"
        },
        "mutable": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "Tasks": {
      "title": "Tasks",
      "type": "object",
      "properties": {
        "name": {
          "example": "task",
          "type": "string"
        },
        "run_after": {
          "example": [
            "task1",
            "task2"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "Template": {
      "title": "Template",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "data": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ]
    },
    "Users": {
      "title": "Users",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "running_total": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "required": [
        "total"
      ]
    },
    "UsersPasswordRequest": {
      "title": "UsersPasswordRequest",
      "example": {
        "old": "oldPass",
        "new": "newPass"
      },
      "type": "object",
      "properties": {
        "old": {
          "type": "string",
          "format": "password"
        },
        "new": {
          "type": "string",
          "format": "password"
        }
      },
      "required": [
        "old",
        "new"
      ]
    },
    "UsersPasswordResetCodeRequest": {
      "title": "UsersPasswordResetCodeRequest",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ]
    },
    "UsersRequest": {
      "title": "UsersRequest",
      "type": "object",
      "properties": {
        "alias": {
          "example": "jdoe",
          "type": "string"
        },
        "first_name": {
          "example": "John",
          "type": "string"
        },
        "last_name": {
          "example": "Doe",
          "type": "string"
        },
        "email": {
          "example": "jdoe@email.com",
          "type": "string"
        },
        "password": {
          "example": "pass123",
          "type": "string",
          "format": "password"
        }
      },
      "required": [
        "alias",
        "email",
        "password"
      ]
    },
    "UsersResetPasswordRequest": {
      "title": "UsersResetPasswordRequest",
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "format": "uuid"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "password"
      ]
    },
    "UsersVerifyEmailRequest": {
      "title": "UsersVerifyEmailRequest",
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "code"
      ]
    },
    "UsersVerifyPasswordResetCodeRequest": {
      "title": "UsersVerifyPasswordResetCodeRequest",
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "code"
      ]
    }
  },
  "security": [],
  "tags": [
    {
      "name": "Users",
      "description": ""
    },
    {
      "name": "Organizations",
      "description": ""
    },
    {
      "name": "Repositories",
      "description": ""
    },
    {
      "name": "Packages",
      "description": ""
    },
    {
      "name": "Subscriptions",
      "description": ""
    },
    {
      "name": "Webhooks",
      "description": ""
    },
    {
      "name": "Availability checks",
      "description": ""
    },
    {
      "name": "Stats",
      "description": ""
    },
    {
      "name": "Integrations",
      "description": ""
    }
  ]
}