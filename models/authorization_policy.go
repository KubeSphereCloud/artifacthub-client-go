// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizationPolicy AuthorizationPolicy
//
// swagger:model AuthorizationPolicy
type AuthorizationPolicy struct {

	// authorization enabled
	// Required: true
	AuthorizationEnabled *bool `json:"authorization_enabled"`

	// custom policy
	// Example: package artifacthub.authz\n\n# By default, deny requests\ndefault allow = false\n\n# Allow the action if the user is allowed to perform it\nallow {\n  # If user's role is owner\n  data.roles.owner.users[_] == input.user\n}\nallow {\n  # If user's role is allowed to perform this action\n  allowed_actions[_] == input.action\n}\n\n# Get user allowed actions\nallowed_actions[action] {\n  user_roles[_] == \"owner\"\n  action := \"all\"\n}\nallowed_actions[action] {\n  action := data.roles[role].allowed_actions[_]\n  user_roles[_] == role\n}\n\n# Get user roles\nuser_roles[role] {\n  data.roles[role].users[_] == input.user\n}\n
	CustomPolicy string `json:"custom_policy,omitempty"`

	// policy data
	// Example: {"roles":{"customRole1":{"allowed_actions":["addOrganizationMember","addOrganizationRepository"],"users":["member1","member2"]},"owner":{"users":["user1"]}}}
	PolicyData interface{} `json:"policy_data,omitempty"`

	// predefined policy
	// Example: rbac.v1
	PredefinedPolicy string `json:"predefined_policy,omitempty"`
}

// Validate validates this authorization policy
func (m *AuthorizationPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationPolicy) validateAuthorizationEnabled(formats strfmt.Registry) error {

	if err := validate.Required("authorization_enabled", "body", m.AuthorizationEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this authorization policy based on context it is used
func (m *AuthorizationPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationPolicy) UnmarshalBinary(b []byte) error {
	var res AuthorizationPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
