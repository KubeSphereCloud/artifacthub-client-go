// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddOptOutEntry(params *AddOptOutEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOptOutEntryCreated, error)

	AddPackageSubscription(params *AddPackageSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPackageSubscriptionCreated, error)

	DeleteOptOutEntry(params *DeleteOptOutEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOptOutEntryNoContent, error)

	DeletePackageSubscription(params *DeletePackageSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePackageSubscriptionNoContent, error)

	GetPackageUserSubscriptions(params *GetPackageUserSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPackageUserSubscriptionsOK, error)

	GetUserOptOutEntries(params *GetUserOptOutEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOptOutEntriesOK, error)

	GetUserSubscriptions(params *GetUserSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSubscriptionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddOptOutEntry adds opt out entry

Add opt-out entry
*/
func (a *Client) AddOptOutEntry(params *AddOptOutEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOptOutEntryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOptOutEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOptOutEntry",
		Method:             "POST",
		PathPattern:        "/subscriptions/opt-out",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOptOutEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOptOutEntryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOptOutEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddPackageSubscription adds package subscription

Add subscription
*/
func (a *Client) AddPackageSubscription(params *AddPackageSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPackageSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPackageSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPackageSubscription",
		Method:             "POST",
		PathPattern:        "/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddPackageSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddPackageSubscriptionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addPackageSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOptOutEntry deletes opt out entry

Delete opt-out entry
*/
func (a *Client) DeleteOptOutEntry(params *DeleteOptOutEntryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOptOutEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOptOutEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOptOutEntry",
		Method:             "DELETE",
		PathPattern:        "/subscriptions/opt-out/{optOutID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOptOutEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOptOutEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOptOutEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePackageSubscription deletes package subscription

Delete subscription
*/
func (a *Client) DeletePackageSubscription(params *DeletePackageSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePackageSubscriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePackageSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePackageSubscription",
		Method:             "DELETE",
		PathPattern:        "/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePackageSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePackageSubscriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePackageSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPackageUserSubscriptions gets package user subscriptions

Get user's subscriptions for the given package
*/
func (a *Client) GetPackageUserSubscriptions(params *GetPackageUserSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPackageUserSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPackageUserSubscriptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPackageUserSubscriptions",
		Method:             "GET",
		PathPattern:        "/subscriptions/{packageID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPackageUserSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPackageUserSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPackageUserSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserOptOutEntries gets user opt out entries

Get user's opt-out entries
*/
func (a *Client) GetUserOptOutEntries(params *GetUserOptOutEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOptOutEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserOptOutEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserOptOutEntries",
		Method:             "GET",
		PathPattern:        "/subscriptions/opt-out",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserOptOutEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOptOutEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserOptOutEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserSubscriptions gets user subscriptions

Get user's subscriptions
*/
func (a *Client) GetUserSubscriptions(params *GetUserSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserSubscriptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserSubscriptions",
		Method:             "GET",
		PathPattern:        "/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
