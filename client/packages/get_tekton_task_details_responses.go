// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetTektonTaskDetailsReader is a Reader for the GetTektonTaskDetails structure.
type GetTektonTaskDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTektonTaskDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTektonTaskDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTektonTaskDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTektonTaskDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTektonTaskDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTektonTaskDetailsOK creates a GetTektonTaskDetailsOK with default headers values
func NewGetTektonTaskDetailsOK() *GetTektonTaskDetailsOK {
	return &GetTektonTaskDetailsOK{}
}

/*
GetTektonTaskDetailsOK describes a response with status code 200, with default header values.

GetTektonTaskDetailsOK get tekton task details o k
*/
type GetTektonTaskDetailsOK struct {
	Payload *models.TektonTaskPackage
}

// IsSuccess returns true when this get tekton task details o k response has a 2xx status code
func (o *GetTektonTaskDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tekton task details o k response has a 3xx status code
func (o *GetTektonTaskDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tekton task details o k response has a 4xx status code
func (o *GetTektonTaskDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tekton task details o k response has a 5xx status code
func (o *GetTektonTaskDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tekton task details o k response a status code equal to that given
func (o *GetTektonTaskDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTektonTaskDetailsOK) Error() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsOK  %+v", 200, o.Payload)
}

func (o *GetTektonTaskDetailsOK) String() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsOK  %+v", 200, o.Payload)
}

func (o *GetTektonTaskDetailsOK) GetPayload() *models.TektonTaskPackage {
	return o.Payload
}

func (o *GetTektonTaskDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TektonTaskPackage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTektonTaskDetailsNotFound creates a GetTektonTaskDetailsNotFound with default headers values
func NewGetTektonTaskDetailsNotFound() *GetTektonTaskDetailsNotFound {
	return &GetTektonTaskDetailsNotFound{}
}

/*
GetTektonTaskDetailsNotFound describes a response with status code 404, with default header values.

The requested resource was not found
*/
type GetTektonTaskDetailsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tekton task details not found response has a 2xx status code
func (o *GetTektonTaskDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tekton task details not found response has a 3xx status code
func (o *GetTektonTaskDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tekton task details not found response has a 4xx status code
func (o *GetTektonTaskDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tekton task details not found response has a 5xx status code
func (o *GetTektonTaskDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get tekton task details not found response a status code equal to that given
func (o *GetTektonTaskDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTektonTaskDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsNotFound  %+v", 404, o.Payload)
}

func (o *GetTektonTaskDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsNotFound  %+v", 404, o.Payload)
}

func (o *GetTektonTaskDetailsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTektonTaskDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTektonTaskDetailsTooManyRequests creates a GetTektonTaskDetailsTooManyRequests with default headers values
func NewGetTektonTaskDetailsTooManyRequests() *GetTektonTaskDetailsTooManyRequests {
	return &GetTektonTaskDetailsTooManyRequests{}
}

/*
GetTektonTaskDetailsTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetTektonTaskDetailsTooManyRequests struct {
}

// IsSuccess returns true when this get tekton task details too many requests response has a 2xx status code
func (o *GetTektonTaskDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tekton task details too many requests response has a 3xx status code
func (o *GetTektonTaskDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tekton task details too many requests response has a 4xx status code
func (o *GetTektonTaskDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tekton task details too many requests response has a 5xx status code
func (o *GetTektonTaskDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get tekton task details too many requests response a status code equal to that given
func (o *GetTektonTaskDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetTektonTaskDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsTooManyRequests ", 429)
}

func (o *GetTektonTaskDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsTooManyRequests ", 429)
}

func (o *GetTektonTaskDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTektonTaskDetailsInternalServerError creates a GetTektonTaskDetailsInternalServerError with default headers values
func NewGetTektonTaskDetailsInternalServerError() *GetTektonTaskDetailsInternalServerError {
	return &GetTektonTaskDetailsInternalServerError{}
}

/*
GetTektonTaskDetailsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetTektonTaskDetailsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tekton task details internal server error response has a 2xx status code
func (o *GetTektonTaskDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tekton task details internal server error response has a 3xx status code
func (o *GetTektonTaskDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tekton task details internal server error response has a 4xx status code
func (o *GetTektonTaskDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tekton task details internal server error response has a 5xx status code
func (o *GetTektonTaskDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get tekton task details internal server error response a status code equal to that given
func (o *GetTektonTaskDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTektonTaskDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTektonTaskDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /packages/tekton-task/{repoName}/{packageName}][%d] getTektonTaskDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTektonTaskDetailsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTektonTaskDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
