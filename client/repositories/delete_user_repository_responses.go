// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// DeleteUserRepositoryReader is a Reader for the DeleteUserRepository structure.
type DeleteUserRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteUserRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUserRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteUserRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteUserRepositoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteUserRepositoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteUserRepositoryNoContent creates a DeleteUserRepositoryNoContent with default headers values
func NewDeleteUserRepositoryNoContent() *DeleteUserRepositoryNoContent {
	return &DeleteUserRepositoryNoContent{}
}

/*
DeleteUserRepositoryNoContent describes a response with status code 204, with default header values.

The request has succeeded, no content returned
*/
type DeleteUserRepositoryNoContent struct {
}

// IsSuccess returns true when this delete user repository no content response has a 2xx status code
func (o *DeleteUserRepositoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user repository no content response has a 3xx status code
func (o *DeleteUserRepositoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user repository no content response has a 4xx status code
func (o *DeleteUserRepositoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user repository no content response has a 5xx status code
func (o *DeleteUserRepositoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user repository no content response a status code equal to that given
func (o *DeleteUserRepositoryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteUserRepositoryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryNoContent ", 204)
}

func (o *DeleteUserRepositoryNoContent) String() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryNoContent ", 204)
}

func (o *DeleteUserRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserRepositoryUnauthorized creates a DeleteUserRepositoryUnauthorized with default headers values
func NewDeleteUserRepositoryUnauthorized() *DeleteUserRepositoryUnauthorized {
	return &DeleteUserRepositoryUnauthorized{}
}

/*
DeleteUserRepositoryUnauthorized describes a response with status code 401, with default header values.

Valid authentication credentials not provided
*/
type DeleteUserRepositoryUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user repository unauthorized response has a 2xx status code
func (o *DeleteUserRepositoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user repository unauthorized response has a 3xx status code
func (o *DeleteUserRepositoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user repository unauthorized response has a 4xx status code
func (o *DeleteUserRepositoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user repository unauthorized response has a 5xx status code
func (o *DeleteUserRepositoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user repository unauthorized response a status code equal to that given
func (o *DeleteUserRepositoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteUserRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteUserRepositoryUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteUserRepositoryUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserRepositoryForbidden creates a DeleteUserRepositoryForbidden with default headers values
func NewDeleteUserRepositoryForbidden() *DeleteUserRepositoryForbidden {
	return &DeleteUserRepositoryForbidden{}
}

/*
DeleteUserRepositoryForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the requested operation
*/
type DeleteUserRepositoryForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user repository forbidden response has a 2xx status code
func (o *DeleteUserRepositoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user repository forbidden response has a 3xx status code
func (o *DeleteUserRepositoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user repository forbidden response has a 4xx status code
func (o *DeleteUserRepositoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user repository forbidden response has a 5xx status code
func (o *DeleteUserRepositoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user repository forbidden response a status code equal to that given
func (o *DeleteUserRepositoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteUserRepositoryForbidden) Error() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryForbidden  %+v", 403, o.Payload)
}

func (o *DeleteUserRepositoryForbidden) String() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryForbidden  %+v", 403, o.Payload)
}

func (o *DeleteUserRepositoryForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserRepositoryTooManyRequests creates a DeleteUserRepositoryTooManyRequests with default headers values
func NewDeleteUserRepositoryTooManyRequests() *DeleteUserRepositoryTooManyRequests {
	return &DeleteUserRepositoryTooManyRequests{}
}

/*
DeleteUserRepositoryTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type DeleteUserRepositoryTooManyRequests struct {
}

// IsSuccess returns true when this delete user repository too many requests response has a 2xx status code
func (o *DeleteUserRepositoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user repository too many requests response has a 3xx status code
func (o *DeleteUserRepositoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user repository too many requests response has a 4xx status code
func (o *DeleteUserRepositoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user repository too many requests response has a 5xx status code
func (o *DeleteUserRepositoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user repository too many requests response a status code equal to that given
func (o *DeleteUserRepositoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteUserRepositoryTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryTooManyRequests ", 429)
}

func (o *DeleteUserRepositoryTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryTooManyRequests ", 429)
}

func (o *DeleteUserRepositoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserRepositoryInternalServerError creates a DeleteUserRepositoryInternalServerError with default headers values
func NewDeleteUserRepositoryInternalServerError() *DeleteUserRepositoryInternalServerError {
	return &DeleteUserRepositoryInternalServerError{}
}

/*
DeleteUserRepositoryInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type DeleteUserRepositoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user repository internal server error response has a 2xx status code
func (o *DeleteUserRepositoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user repository internal server error response has a 3xx status code
func (o *DeleteUserRepositoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user repository internal server error response has a 4xx status code
func (o *DeleteUserRepositoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user repository internal server error response has a 5xx status code
func (o *DeleteUserRepositoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete user repository internal server error response a status code equal to that given
func (o *DeleteUserRepositoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteUserRepositoryInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteUserRepositoryInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /repositories/user/{repoName}][%d] deleteUserRepositoryInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteUserRepositoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserRepositoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
