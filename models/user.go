// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User
//
// swagger:model User
type User struct {

	// alias
	// Example: jdoe
	// Required: true
	Alias *string `json:"alias"`

	// email
	// Example: jdoe@email.com
	// Required: true
	Email *string `json:"email"`

	// first name
	// Example: John
	FirstName string `json:"first_name,omitempty"`

	// last name
	// Example: Doe
	LastName string `json:"last_name,omitempty"`

	// password set
	// Required: true
	PasswordSet *bool `json:"password_set"`

	// profile image id
	// Example: 12345abcde
	ProfileImageID string `json:"profile_image_id,omitempty"`

	// tfa enabled
	TfaEnabled bool `json:"tfa_enabled,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAlias(formats strfmt.Registry) error {

	if err := validate.Required("alias", "body", m.Alias); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePasswordSet(formats strfmt.Registry) error {

	if err := validate.Required("password_set", "body", m.PasswordSet); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
