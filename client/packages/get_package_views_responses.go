// Code generated by go-swagger; DO NOT EDIT.

package packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// GetPackageViewsReader is a Reader for the GetPackageViews structure.
type GetPackageViewsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPackageViewsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPackageViewsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPackageViewsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPackageViewsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPackageViewsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPackageViewsOK creates a GetPackageViewsOK with default headers values
func NewGetPackageViewsOK() *GetPackageViewsOK {
	return &GetPackageViewsOK{}
}

/*
GetPackageViewsOK describes a response with status code 200, with default header values.

GetPackageViewsOK get package views o k
*/
type GetPackageViewsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get package views o k response has a 2xx status code
func (o *GetPackageViewsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get package views o k response has a 3xx status code
func (o *GetPackageViewsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package views o k response has a 4xx status code
func (o *GetPackageViewsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get package views o k response has a 5xx status code
func (o *GetPackageViewsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get package views o k response a status code equal to that given
func (o *GetPackageViewsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPackageViewsOK) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsOK  %+v", 200, o.Payload)
}

func (o *GetPackageViewsOK) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsOK  %+v", 200, o.Payload)
}

func (o *GetPackageViewsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetPackageViewsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackageViewsBadRequest creates a GetPackageViewsBadRequest with default headers values
func NewGetPackageViewsBadRequest() *GetPackageViewsBadRequest {
	return &GetPackageViewsBadRequest{}
}

/*
GetPackageViewsBadRequest describes a response with status code 400, with default header values.

The request sent was not valid
*/
type GetPackageViewsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get package views bad request response has a 2xx status code
func (o *GetPackageViewsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package views bad request response has a 3xx status code
func (o *GetPackageViewsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package views bad request response has a 4xx status code
func (o *GetPackageViewsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package views bad request response has a 5xx status code
func (o *GetPackageViewsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get package views bad request response a status code equal to that given
func (o *GetPackageViewsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetPackageViewsBadRequest) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsBadRequest  %+v", 400, o.Payload)
}

func (o *GetPackageViewsBadRequest) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsBadRequest  %+v", 400, o.Payload)
}

func (o *GetPackageViewsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPackageViewsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackageViewsTooManyRequests creates a GetPackageViewsTooManyRequests with default headers values
func NewGetPackageViewsTooManyRequests() *GetPackageViewsTooManyRequests {
	return &GetPackageViewsTooManyRequests{}
}

/*
GetPackageViewsTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type GetPackageViewsTooManyRequests struct {
}

// IsSuccess returns true when this get package views too many requests response has a 2xx status code
func (o *GetPackageViewsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package views too many requests response has a 3xx status code
func (o *GetPackageViewsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package views too many requests response has a 4xx status code
func (o *GetPackageViewsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package views too many requests response has a 5xx status code
func (o *GetPackageViewsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get package views too many requests response a status code equal to that given
func (o *GetPackageViewsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetPackageViewsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsTooManyRequests ", 429)
}

func (o *GetPackageViewsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsTooManyRequests ", 429)
}

func (o *GetPackageViewsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPackageViewsInternalServerError creates a GetPackageViewsInternalServerError with default headers values
func NewGetPackageViewsInternalServerError() *GetPackageViewsInternalServerError {
	return &GetPackageViewsInternalServerError{}
}

/*
GetPackageViewsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type GetPackageViewsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get package views internal server error response has a 2xx status code
func (o *GetPackageViewsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package views internal server error response has a 3xx status code
func (o *GetPackageViewsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package views internal server error response has a 4xx status code
func (o *GetPackageViewsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get package views internal server error response has a 5xx status code
func (o *GetPackageViewsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get package views internal server error response a status code equal to that given
func (o *GetPackageViewsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPackageViewsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPackageViewsInternalServerError) String() string {
	return fmt.Sprintf("[GET /packages/{packageID}/views][%d] getPackageViewsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPackageViewsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPackageViewsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
