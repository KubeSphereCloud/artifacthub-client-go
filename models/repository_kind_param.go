// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RepositoryKindParam RepositoryKindParam
//
// Repository kind name:
// * `helm` - Helm charts
// * `falco` - Falco rules
// * `opa` - OPA policies
// * `olm` - OLM operators
// * `tbaction` - Tinkerbell actions
// * `krew` - Krew kubectl plugins
// * `helm-plugin` - Helm plugins
// * `tekton` - Tekton tasks
// * `keda-scaler` - KEDA scalers
// * `coredns` - Core DNS plugins
// * `keptn` - Keptn integrations
// * `tekton-pipeline` - Tekton pipelines
// * `container` - Container images
// * `kubewarden` - Kubewarden policies
// * `gatekeeper` - Gatekeeper policies
// * `kyverno` - Kyverno policies
// * `knative-client-plugin` - Knative client plugins
// * `backstage` - Backstage plugins
//
// swagger:model RepositoryKindParam
type RepositoryKindParam string

func NewRepositoryKindParam(value RepositoryKindParam) *RepositoryKindParam {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RepositoryKindParam.
func (m RepositoryKindParam) Pointer() *RepositoryKindParam {
	return &m
}

const (

	// RepositoryKindParamHelm captures enum value "helm"
	RepositoryKindParamHelm RepositoryKindParam = "helm"

	// RepositoryKindParamOpa captures enum value "opa"
	RepositoryKindParamOpa RepositoryKindParam = "opa"

	// RepositoryKindParamFalco captures enum value "falco"
	RepositoryKindParamFalco RepositoryKindParam = "falco"

	// RepositoryKindParamOlm captures enum value "olm"
	RepositoryKindParamOlm RepositoryKindParam = "olm"

	// RepositoryKindParamTbaction captures enum value "tbaction"
	RepositoryKindParamTbaction RepositoryKindParam = "tbaction"

	// RepositoryKindParamKrew captures enum value "krew"
	RepositoryKindParamKrew RepositoryKindParam = "krew"

	// RepositoryKindParamHelmDashPlugin captures enum value "helm-plugin"
	RepositoryKindParamHelmDashPlugin RepositoryKindParam = "helm-plugin"

	// RepositoryKindParamTektonDashTask captures enum value "tekton-task"
	RepositoryKindParamTektonDashTask RepositoryKindParam = "tekton-task"

	// RepositoryKindParamKedaDashScaler captures enum value "keda-scaler"
	RepositoryKindParamKedaDashScaler RepositoryKindParam = "keda-scaler"

	// RepositoryKindParamCoredns captures enum value "coredns"
	RepositoryKindParamCoredns RepositoryKindParam = "coredns"

	// RepositoryKindParamKeptn captures enum value "keptn"
	RepositoryKindParamKeptn RepositoryKindParam = "keptn"

	// RepositoryKindParamTektonDashPipeline captures enum value "tekton-pipeline"
	RepositoryKindParamTektonDashPipeline RepositoryKindParam = "tekton-pipeline"

	// RepositoryKindParamContainer captures enum value "container"
	RepositoryKindParamContainer RepositoryKindParam = "container"

	// RepositoryKindParamKubewarden captures enum value "kubewarden"
	RepositoryKindParamKubewarden RepositoryKindParam = "kubewarden"

	// RepositoryKindParamGatekeeper captures enum value "gatekeeper"
	RepositoryKindParamGatekeeper RepositoryKindParam = "gatekeeper"

	// RepositoryKindParamKyverno captures enum value "kyverno"
	RepositoryKindParamKyverno RepositoryKindParam = "kyverno"

	// RepositoryKindParamKnativeDashClientDashPlugin captures enum value "knative-client-plugin"
	RepositoryKindParamKnativeDashClientDashPlugin RepositoryKindParam = "knative-client-plugin"

	// RepositoryKindParamBackstage captures enum value "backstage"
	RepositoryKindParamBackstage RepositoryKindParam = "backstage"
)

// for schema
var repositoryKindParamEnum []interface{}

func init() {
	var res []RepositoryKindParam
	if err := json.Unmarshal([]byte(`["helm","opa","falco","olm","tbaction","krew","helm-plugin","tekton-task","keda-scaler","coredns","keptn","tekton-pipeline","container","kubewarden","gatekeeper","kyverno","knative-client-plugin","backstage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repositoryKindParamEnum = append(repositoryKindParamEnum, v)
	}
}

func (m RepositoryKindParam) validateRepositoryKindParamEnum(path, location string, value RepositoryKindParam) error {
	if err := validate.EnumCase(path, location, value, repositoryKindParamEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this repository kind param
func (m RepositoryKindParam) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRepositoryKindParamEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this repository kind param based on context it is used
func (m RepositoryKindParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
