// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/KubeSphereCloud/artifacthub-client-go/models"
)

// UpdateUserRepositoryReader is a Reader for the UpdateUserRepository structure.
type UpdateUserRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateUserRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserRepositoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateUserRepositoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserRepositoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUserRepositoryNoContent creates a UpdateUserRepositoryNoContent with default headers values
func NewUpdateUserRepositoryNoContent() *UpdateUserRepositoryNoContent {
	return &UpdateUserRepositoryNoContent{}
}

/*
UpdateUserRepositoryNoContent describes a response with status code 204, with default header values.

The request has succeeded, no content returned
*/
type UpdateUserRepositoryNoContent struct {
}

// IsSuccess returns true when this update user repository no content response has a 2xx status code
func (o *UpdateUserRepositoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user repository no content response has a 3xx status code
func (o *UpdateUserRepositoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user repository no content response has a 4xx status code
func (o *UpdateUserRepositoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user repository no content response has a 5xx status code
func (o *UpdateUserRepositoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update user repository no content response a status code equal to that given
func (o *UpdateUserRepositoryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateUserRepositoryNoContent) Error() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryNoContent ", 204)
}

func (o *UpdateUserRepositoryNoContent) String() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryNoContent ", 204)
}

func (o *UpdateUserRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserRepositoryBadRequest creates a UpdateUserRepositoryBadRequest with default headers values
func NewUpdateUserRepositoryBadRequest() *UpdateUserRepositoryBadRequest {
	return &UpdateUserRepositoryBadRequest{}
}

/*
UpdateUserRepositoryBadRequest describes a response with status code 400, with default header values.

The request sent was not valid
*/
type UpdateUserRepositoryBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user repository bad request response has a 2xx status code
func (o *UpdateUserRepositoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user repository bad request response has a 3xx status code
func (o *UpdateUserRepositoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user repository bad request response has a 4xx status code
func (o *UpdateUserRepositoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user repository bad request response has a 5xx status code
func (o *UpdateUserRepositoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user repository bad request response a status code equal to that given
func (o *UpdateUserRepositoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateUserRepositoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserRepositoryBadRequest) String() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserRepositoryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRepositoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRepositoryUnauthorized creates a UpdateUserRepositoryUnauthorized with default headers values
func NewUpdateUserRepositoryUnauthorized() *UpdateUserRepositoryUnauthorized {
	return &UpdateUserRepositoryUnauthorized{}
}

/*
UpdateUserRepositoryUnauthorized describes a response with status code 401, with default header values.

Valid authentication credentials not provided
*/
type UpdateUserRepositoryUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user repository unauthorized response has a 2xx status code
func (o *UpdateUserRepositoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user repository unauthorized response has a 3xx status code
func (o *UpdateUserRepositoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user repository unauthorized response has a 4xx status code
func (o *UpdateUserRepositoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user repository unauthorized response has a 5xx status code
func (o *UpdateUserRepositoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user repository unauthorized response a status code equal to that given
func (o *UpdateUserRepositoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateUserRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserRepositoryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserRepositoryUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRepositoryForbidden creates a UpdateUserRepositoryForbidden with default headers values
func NewUpdateUserRepositoryForbidden() *UpdateUserRepositoryForbidden {
	return &UpdateUserRepositoryForbidden{}
}

/*
UpdateUserRepositoryForbidden describes a response with status code 403, with default header values.

The user does not have permission to perform the requested operation
*/
type UpdateUserRepositoryForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user repository forbidden response has a 2xx status code
func (o *UpdateUserRepositoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user repository forbidden response has a 3xx status code
func (o *UpdateUserRepositoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user repository forbidden response has a 4xx status code
func (o *UpdateUserRepositoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user repository forbidden response has a 5xx status code
func (o *UpdateUserRepositoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user repository forbidden response a status code equal to that given
func (o *UpdateUserRepositoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateUserRepositoryForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserRepositoryForbidden) String() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserRepositoryForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRepositoryTooManyRequests creates a UpdateUserRepositoryTooManyRequests with default headers values
func NewUpdateUserRepositoryTooManyRequests() *UpdateUserRepositoryTooManyRequests {
	return &UpdateUserRepositoryTooManyRequests{}
}

/*
UpdateUserRepositoryTooManyRequests describes a response with status code 429, with default header values.

The user has sent too many requests in a given amount of time
*/
type UpdateUserRepositoryTooManyRequests struct {
}

// IsSuccess returns true when this update user repository too many requests response has a 2xx status code
func (o *UpdateUserRepositoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user repository too many requests response has a 3xx status code
func (o *UpdateUserRepositoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user repository too many requests response has a 4xx status code
func (o *UpdateUserRepositoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user repository too many requests response has a 5xx status code
func (o *UpdateUserRepositoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update user repository too many requests response a status code equal to that given
func (o *UpdateUserRepositoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateUserRepositoryTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryTooManyRequests ", 429)
}

func (o *UpdateUserRepositoryTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryTooManyRequests ", 429)
}

func (o *UpdateUserRepositoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserRepositoryInternalServerError creates a UpdateUserRepositoryInternalServerError with default headers values
func NewUpdateUserRepositoryInternalServerError() *UpdateUserRepositoryInternalServerError {
	return &UpdateUserRepositoryInternalServerError{}
}

/*
UpdateUserRepositoryInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition that prevented it from fulfilling the request
*/
type UpdateUserRepositoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user repository internal server error response has a 2xx status code
func (o *UpdateUserRepositoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user repository internal server error response has a 3xx status code
func (o *UpdateUserRepositoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user repository internal server error response has a 4xx status code
func (o *UpdateUserRepositoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user repository internal server error response has a 5xx status code
func (o *UpdateUserRepositoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update user repository internal server error response a status code equal to that given
func (o *UpdateUserRepositoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateUserRepositoryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserRepositoryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /repositories/user/{repoName}][%d] updateUserRepositoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserRepositoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserRepositoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
